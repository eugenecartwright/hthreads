#################################################################
# Makefile generated by Xilinx Platform Studio 
# Project:/home/eugene/homogeneous_port/hthread_hal/src/platforms/xilinx/ml507_cell/design/system.xmp
#
# WARNING : This file will be re-generated every time a command
# to run a make target is invoked. So, any changes made to this  
# file manually, will be lost when make is invoked next. 
#################################################################

XILINX_EDK_DIR = /opt/Xilinx/10.1/EDK
NON_CYG_XILINX_EDK_DIR = /opt/Xilinx/10.1/EDK

SYSTEM = system

MHSFILE = system.mhs

MSSFILE = system.mss

FPGA_ARCH = virtex5

DEVICE = xc5vfx70tff1136-1

LANGUAGE = vhdl

SEARCHPATHOPT =  -lp /home/eugene/homogeneous_port/src/hardware/

SUBMODULE_OPT = 

PLATGEN_OPTIONS = -p $(DEVICE) -lang $(LANGUAGE) $(SEARCHPATHOPT) $(SUBMODULE_OPT)

LIBGEN_OPTIONS = -mhs $(MHSFILE) -p $(DEVICE) $(SEARCHPATHOPT) \
                   $(MICROBLAZE_0_LIBG_OPT) \
                   $(MICROBLAZE_1_LIBG_OPT) \
                   $(MICROBLAZE_2A_LIBG_OPT) \
                   $(MICROBLAZE_3A_LIBG_OPT)

VPGEN_OPTIONS = -p $(DEVICE) $(SEARCHPATHOPT)

MANAGE_FASTRT_OPTIONS = -reduce_fanout no

OBSERVE_PAR_OPTIONS = -error yes

TESTAPP_MEMORY_OUTPUT_DIR = TestApp_Memory
TESTAPP_MEMORY_OUTPUT = $(TESTAPP_MEMORY_OUTPUT_DIR)/executable.elf

TESTAPP_PERIPHERAL_OUTPUT_DIR = TestApp_Peripheral
TESTAPP_PERIPHERAL_OUTPUT = $(TESTAPP_PERIPHERAL_OUTPUT_DIR)/executable.elf

MB_HWT_OUTPUT_DIR = MB_HWT
MB_HWT_OUTPUT = $(MB_HWT_OUTPUT_DIR)/executable.elf

EMBEDDABLE_OUTPUT_DIR = embeddable
EMBEDDABLE_OUTPUT = $(EMBEDDABLE_OUTPUT_DIR)/executable.elf

MB_HWT1_OUTPUT_DIR = MB_HWT1
MB_HWT1_OUTPUT = $(MB_HWT1_OUTPUT_DIR)/executable.elf

MB_HWT2_OUTPUT_DIR = MB_HWT2
MB_HWT2_OUTPUT = $(MB_HWT2_OUTPUT_DIR)/executable.elf

MB_HWT3_OUTPUT_DIR = MB_HWT3
MB_HWT3_OUTPUT = $(MB_HWT3_OUTPUT_DIR)/executable.elf

EMBEDDABLE_COMPAT_OUTPUT_DIR = embeddable_compat
EMBEDDABLE_COMPAT_OUTPUT = $(EMBEDDABLE_COMPAT_OUTPUT_DIR)/executable.elf

HIST_THREAD_OUTPUT_DIR = hist_thread
HIST_THREAD_OUTPUT = $(HIST_THREAD_OUTPUT_DIR)/executable.elf

MICROBLAZE_BOOTLOOP = $(XILINX_EDK_DIR)/sw/lib/microblaze/mb_bootloop.elf
PPC405_BOOTLOOP = $(XILINX_EDK_DIR)/sw/lib/ppc405/ppc_bootloop.elf
PPC440_BOOTLOOP = $(XILINX_EDK_DIR)/sw/lib/ppc440/ppc440_bootloop.elf
BOOTLOOP_DIR = bootloops

PPC440_0_BOOTLOOP = $(BOOTLOOP_DIR)/ppc440_0.elf

MICROBLAZE_0_BOOTLOOP = $(BOOTLOOP_DIR)/microblaze_0.elf
MICROBLAZE_0_XMDSTUB = microblaze_0/code/xmdstub.elf

MICROBLAZE_1_BOOTLOOP = $(BOOTLOOP_DIR)/microblaze_1.elf
MICROBLAZE_1_XMDSTUB = microblaze_1/code/xmdstub.elf

MICROBLAZE_2A_BOOTLOOP = $(BOOTLOOP_DIR)/microblaze_2a.elf
MICROBLAZE_2A_XMDSTUB = microblaze_2a/code/xmdstub.elf

MICROBLAZE_3A_BOOTLOOP = $(BOOTLOOP_DIR)/microblaze_3a.elf
MICROBLAZE_3A_XMDSTUB = microblaze_3a/code/xmdstub.elf

BRAMINIT_ELF_FILES =  $(TESTAPP_MEMORY_OUTPUT) $(MB_HWT_OUTPUT) $(MB_HWT1_OUTPUT) $(MB_HWT2_OUTPUT) $(MB_HWT3_OUTPUT) 
BRAMINIT_ELF_FILE_ARGS =   -pe ppc440_0 $(TESTAPP_MEMORY_OUTPUT)  -pe microblaze_0 $(MB_HWT_OUTPUT)  -pe microblaze_1 $(MB_HWT1_OUTPUT)  -pe microblaze_2a $(MB_HWT2_OUTPUT)  -pe microblaze_3a $(MB_HWT3_OUTPUT) 

ALL_USER_ELF_FILES = $(TESTAPP_MEMORY_OUTPUT) $(TESTAPP_PERIPHERAL_OUTPUT) $(MB_HWT_OUTPUT) $(EMBEDDABLE_OUTPUT) $(MB_HWT1_OUTPUT) $(MB_HWT2_OUTPUT) $(MB_HWT3_OUTPUT) $(EMBEDDABLE_COMPAT_OUTPUT) $(HIST_THREAD_OUTPUT) 

SIM_CMD = vsim

BEHAVIORAL_SIM_SCRIPT = simulation/behavioral/$(SYSTEM)_setup.do

STRUCTURAL_SIM_SCRIPT = simulation/structural/$(SYSTEM)_setup.do

TIMING_SIM_SCRIPT = simulation/timing/$(SYSTEM)_setup.do

DEFAULT_SIM_SCRIPT = $(BEHAVIORAL_SIM_SCRIPT)

MIX_LANG_SIM_OPT = -mixed yes

SIMGEN_OPTIONS = -p $(DEVICE) -lang $(LANGUAGE) $(SEARCHPATHOPT) $(BRAMINIT_ELF_FILE_ARGS) $(MIX_LANG_SIM_OPT)  -s mti -X /opt/Xilinx/10.1/ISE/ -E /opt/Xilinx/10.1/EDK_sim/


LIBRARIES =  \
       ppc440_0/lib/libxil.a  \
       microblaze_0/lib/libxil.a  \
       microblaze_1/lib/libxil.a  \
       microblaze_2a/lib/libxil.a  \
       microblaze_3a/lib/libxil.a 
VPEXEC = virtualplatform/vpexec

LIBSCLEAN_TARGETS = ppc440_0_libsclean microblaze_0_libsclean microblaze_1_libsclean microblaze_2a_libsclean microblaze_3a_libsclean 

PROGRAMCLEAN_TARGETS = TestApp_Memory_programclean TestApp_Peripheral_programclean MB_HWT_programclean embeddable_programclean MB_HWT1_programclean MB_HWT2_programclean MB_HWT3_programclean embeddable_compat_programclean hist_thread_programclean 

CORE_STATE_DEVELOPMENT_FILES = /opt/Xilinx/10.1/EDK/hw/XilinxProcessorIPLib/pcores/proc_common_v3_00_a/hdl/vhdl/proc_common_pkg.vhd \
/opt/Xilinx/10.1/EDK/hw/XilinxProcessorIPLib/pcores/proc_common_v3_00_a/hdl/vhdl/ipif_pkg.vhd \
/opt/Xilinx/10.1/EDK/hw/XilinxProcessorIPLib/pcores/proc_common_v3_00_a/hdl/vhdl/or_muxcy.vhd \
/opt/Xilinx/10.1/EDK/hw/XilinxProcessorIPLib/pcores/proc_common_v3_00_a/hdl/vhdl/or_gate128.vhd \
/opt/Xilinx/10.1/EDK/hw/XilinxProcessorIPLib/pcores/proc_common_v3_00_a/hdl/vhdl/family_support.vhd \
/opt/Xilinx/10.1/EDK/hw/XilinxProcessorIPLib/pcores/proc_common_v3_00_a/hdl/vhdl/pselect_f.vhd \
/opt/Xilinx/10.1/EDK/hw/XilinxProcessorIPLib/pcores/proc_common_v3_00_a/hdl/vhdl/counter_f.vhd \
/opt/Xilinx/10.1/EDK/hw/XilinxProcessorIPLib/pcores/proc_common_v3_00_a/hdl/vhdl/soft_reset.vhd \
/opt/Xilinx/10.1/EDK/hw/XilinxProcessorIPLib/pcores/plbv46_slave_single_v1_01_a/hdl/vhdl/plb_address_decoder.vhd \
/opt/Xilinx/10.1/EDK/hw/XilinxProcessorIPLib/pcores/plbv46_slave_single_v1_01_a/hdl/vhdl/plb_slave_attachment.vhd \
/opt/Xilinx/10.1/EDK/hw/XilinxProcessorIPLib/pcores/plbv46_slave_single_v1_01_a/hdl/vhdl/plbv46_slave_single.vhd \
/home/eugene/homogeneous_port/src/hardware/MyRepository/pcores/plb_hthread_reset_core_v1_00_a/hdl/vhdl/user_logic.vhd \
/home/eugene/homogeneous_port/src/hardware/MyRepository/pcores/plb_hthread_reset_core_v1_00_a/hdl/vhdl/plb_hthread_reset_core.vhd

WRAPPER_NGC_FILES = implementation/ppc440_0_wrapper.ngc \
implementation/plb_v46_0_wrapper.ngc \
implementation/xps_bram_if_cntlr_1_wrapper.ngc \
implementation/xps_bram_if_cntlr_1_bram_wrapper.ngc \
implementation/rs232_uart_1_wrapper.ngc \
implementation/leds_8bit_wrapper.ngc \
implementation/sram_wrapper.ngc \
implementation/ddr2_sdram_wrapper.ngc \
implementation/sram_util_bus_split_0_wrapper.ngc \
implementation/ddr2_sdram_util_bus_split_1_wrapper.ngc \
implementation/ddr2_sdram_util_bus_split_2_wrapper.ngc \
implementation/clock_generator_0_wrapper.ngc \
implementation/jtagppc_cntlr_0_wrapper.ngc \
implementation/proc_sys_reset_0_wrapper.ngc \
implementation/xps_intc_0_wrapper.ngc \
implementation/plbv46_opb_bridge_0_wrapper.ngc \
implementation/opb_plbv46_bridge_0_wrapper.ngc \
implementation/opb_v20_0_wrapper.ngc \
implementation/opb_bram_if_cntlr_1_wrapper.ngc \
implementation/bram_block_0_wrapper.ngc \
implementation/xps_bram_if_cntlr_0_wrapper.ngc \
implementation/plb_hthread_reset_core_0_wrapper.ngc \
implementation/thread_manager_wrapper.ngc \
implementation/scheduler_wrapper.ngc \
implementation/synch_manager_wrapper.ngc \
implementation/cond_vars_wrapper.ngc \
implementation/xps_timer_0_wrapper.ngc \
implementation/xps_hw_thread_bram_cntlr_wrapper.ngc \
implementation/hw_thread_bram_wrapper.ngc \
implementation/microblaze_0_wrapper.ngc \
implementation/mb_ilmb_wrapper.ngc \
implementation/mb_dlmb_wrapper.ngc \
implementation/ilmb_cntlr_wrapper.ngc \
implementation/dlmb_cntlr_wrapper.ngc \
implementation/mb_bram_wrapper.ngc \
implementation/mdm_0_wrapper.ngc \
implementation/microblaze_1_wrapper.ngc \
implementation/mb_ilmb1_wrapper.ngc \
implementation/mb_dlmb1_wrapper.ngc \
implementation/ilmb_cntlr1_wrapper.ngc \
implementation/dlmb_cntlr1_wrapper.ngc \
implementation/mb_bram1_wrapper.ngc \
implementation/microblaze_2a_wrapper.ngc \
implementation/mb_ilmb2a_wrapper.ngc \
implementation/mb_dlmb2a_wrapper.ngc \
implementation/ilmb_cntlr2a_wrapper.ngc \
implementation/dlmb_cntlr2a_wrapper.ngc \
implementation/mb_bram2a_wrapper.ngc \
implementation/microblaze_3a_wrapper.ngc \
implementation/mb_ilmb3a_wrapper.ngc \
implementation/mb_dlmb3a_wrapper.ngc \
implementation/ilmb_cntlr3a_wrapper.ngc \
implementation/dlmb_cntlr3a_wrapper.ngc \
implementation/mb_bram3a_wrapper.ngc

POSTSYN_NETLIST = implementation/$(SYSTEM).ngc

SYSTEM_BIT = implementation/$(SYSTEM).bit

DOWNLOAD_BIT = implementation/download.bit

SYSTEM_ACE = implementation/$(SYSTEM).ace

UCF_FILE = data/system.ucf

BMM_FILE = implementation/$(SYSTEM).bmm

BITGEN_UT_FILE = etc/bitgen.ut

XFLOW_OPT_FILE = etc/fast_runtime.opt
XFLOW_DEPENDENCY = __xps/xpsxflow.opt $(XFLOW_OPT_FILE)

XPLORER_DEPENDENCY = __xps/xplorer.opt
XPLORER_OPTIONS = -p $(DEVICE) -uc $(SYSTEM).ucf -bm $(SYSTEM).bmm -max_runs 7

FPGA_IMP_DEPENDENCY = $(BMM_FILE) $(POSTSYN_NETLIST) $(UCF_FILE) $(XFLOW_DEPENDENCY)

#################################################################
# SOFTWARE APPLICATION TESTAPP_MEMORY
#################################################################

TESTAPP_MEMORY_SOURCES = TestApp_Memory/src/TestApp_Memory.c 

TESTAPP_MEMORY_HEADERS = 

TESTAPP_MEMORY_CC = powerpc-eabi-gcc
TESTAPP_MEMORY_CC_SIZE = powerpc-eabi-size
TESTAPP_MEMORY_CC_OPT = -O2
TESTAPP_MEMORY_CFLAGS = 
TESTAPP_MEMORY_CC_SEARCH = # -B
TESTAPP_MEMORY_LIBPATH = -L./ppc440_0/lib/ # -L
TESTAPP_MEMORY_INCLUDES = -I./ppc440_0/include/ # -I
TESTAPP_MEMORY_LFLAGS = # -l
TESTAPP_MEMORY_LINKER_SCRIPT = TestApp_Memory/src/TestApp_Memory_LinkScr.ld
TESTAPP_MEMORY_LINKER_SCRIPT_FLAG = -Wl,-T -Wl,$(TESTAPP_MEMORY_LINKER_SCRIPT) 
TESTAPP_MEMORY_CC_DEBUG_FLAG =  -g 
TESTAPP_MEMORY_CC_PROFILE_FLAG = # -pg
TESTAPP_MEMORY_CC_GLOBPTR_FLAG= # -msdata=eabi
TESTAPP_MEMORY_CC_INFERRED_FLAGS= -mcpu=440 
TESTAPP_MEMORY_CC_START_ADDR_FLAG=  #  # -Wl,-defsym -Wl,_START_ADDR=
TESTAPP_MEMORY_CC_STACK_SIZE_FLAG=  #  # -Wl,-defsym -Wl,_STACK_SIZE=
TESTAPP_MEMORY_CC_HEAP_SIZE_FLAG=  #  # -Wl,-defsym -Wl,_HEAP_SIZE=
TESTAPP_MEMORY_OTHER_CC_FLAGS= $(TESTAPP_MEMORY_CC_GLOBPTR_FLAG)  \
                  $(TESTAPP_MEMORY_CC_START_ADDR_FLAG) $(TESTAPP_MEMORY_CC_STACK_SIZE_FLAG) $(TESTAPP_MEMORY_CC_HEAP_SIZE_FLAG)  \
                  $(TESTAPP_MEMORY_CC_INFERRED_FLAGS)  \
                  $(TESTAPP_MEMORY_LINKER_SCRIPT_FLAG) $(TESTAPP_MEMORY_CC_DEBUG_FLAG) $(TESTAPP_MEMORY_CC_PROFILE_FLAG) 

#################################################################
# SOFTWARE APPLICATION TESTAPP_PERIPHERAL
#################################################################

TESTAPP_PERIPHERAL_SOURCES = TestApp_Peripheral/src/TestApp_Peripheral.c TestApp_Peripheral/src/xgpio_tapp_example.c 

TESTAPP_PERIPHERAL_HEADERS = TestApp_Peripheral/src/gpio_header.h 

TESTAPP_PERIPHERAL_CC = powerpc-eabi-gcc
TESTAPP_PERIPHERAL_CC_SIZE = powerpc-eabi-size
TESTAPP_PERIPHERAL_CC_OPT = -O2
TESTAPP_PERIPHERAL_CFLAGS = 
TESTAPP_PERIPHERAL_CC_SEARCH = # -B
TESTAPP_PERIPHERAL_LIBPATH = -L./ppc440_0/lib/ # -L
TESTAPP_PERIPHERAL_INCLUDES = -I./ppc440_0/include/  -ITestApp_Peripheral/src/ # -I
TESTAPP_PERIPHERAL_LFLAGS = # -l
TESTAPP_PERIPHERAL_LINKER_SCRIPT = TestApp_Peripheral/src/TestApp_Peripheral_LinkScr.ld
TESTAPP_PERIPHERAL_LINKER_SCRIPT_FLAG = -Wl,-T -Wl,$(TESTAPP_PERIPHERAL_LINKER_SCRIPT) 
TESTAPP_PERIPHERAL_CC_DEBUG_FLAG =  -g 
TESTAPP_PERIPHERAL_CC_PROFILE_FLAG = # -pg
TESTAPP_PERIPHERAL_CC_GLOBPTR_FLAG= # -msdata=eabi
TESTAPP_PERIPHERAL_CC_INFERRED_FLAGS= -mcpu=440 
TESTAPP_PERIPHERAL_CC_START_ADDR_FLAG=  #  # -Wl,-defsym -Wl,_START_ADDR=
TESTAPP_PERIPHERAL_CC_STACK_SIZE_FLAG=  #  # -Wl,-defsym -Wl,_STACK_SIZE=
TESTAPP_PERIPHERAL_CC_HEAP_SIZE_FLAG=  #  # -Wl,-defsym -Wl,_HEAP_SIZE=
TESTAPP_PERIPHERAL_OTHER_CC_FLAGS= $(TESTAPP_PERIPHERAL_CC_GLOBPTR_FLAG)  \
                  $(TESTAPP_PERIPHERAL_CC_START_ADDR_FLAG) $(TESTAPP_PERIPHERAL_CC_STACK_SIZE_FLAG) $(TESTAPP_PERIPHERAL_CC_HEAP_SIZE_FLAG)  \
                  $(TESTAPP_PERIPHERAL_CC_INFERRED_FLAGS)  \
                  $(TESTAPP_PERIPHERAL_LINKER_SCRIPT_FLAG) $(TESTAPP_PERIPHERAL_CC_DEBUG_FLAG) $(TESTAPP_PERIPHERAL_CC_PROFILE_FLAG) 

#################################################################
# SOFTWARE APPLICATION MB_HWT
#################################################################

MB_HWT_SOURCES = my_sw/hw_thread.c my_sw/proc_hw_thread.c 

MB_HWT_HEADERS = my_sw/proc_hw_thread.h 

MB_HWT_CC = mb-gcc
MB_HWT_CC_SIZE = mb-size
MB_HWT_CC_OPT = -O2
MB_HWT_CFLAGS = 
MB_HWT_CC_SEARCH = # -B
MB_HWT_LIBPATH = -L./microblaze_0/lib/ # -L
MB_HWT_INCLUDES = -I./microblaze_0/include/  -Imy_sw/ # -I
MB_HWT_LFLAGS = # -l
MB_HWT_LINKER_SCRIPT = 
MB_HWT_LINKER_SCRIPT_FLAG = #-Wl,-T -Wl,$(MB_HWT_LINKER_SCRIPT) 
MB_HWT_CC_DEBUG_FLAG =  -g 
MB_HWT_CC_PROFILE_FLAG = # -pg
MB_HWT_CC_GLOBPTR_FLAG= # -mxl-gp-opt
MB_HWT_MODE = executable
MB_HWT_LIBG_OPT = -$(MB_HWT_MODE) microblaze_0
MB_HWT_CC_INFERRED_FLAGS= -mno-xl-soft-mul -mxl-pattern-compare -mcpu=v7.10.d 
MB_HWT_CC_START_ADDR_FLAG=  # -Wl,-defsym -Wl,_TEXT_START_ADDR=
MB_HWT_CC_STACK_SIZE_FLAG=  # -Wl,-defsym -Wl,_STACK_SIZE=
MB_HWT_CC_HEAP_SIZE_FLAG=  # -Wl,-defsym -Wl,_HEAP_SIZE=
MB_HWT_OTHER_CC_FLAGS= $(MB_HWT_CC_GLOBPTR_FLAG)  \
                  $(MB_HWT_CC_START_ADDR_FLAG) $(MB_HWT_CC_STACK_SIZE_FLAG) $(MB_HWT_CC_HEAP_SIZE_FLAG)  \
                  $(MB_HWT_CC_INFERRED_FLAGS)  \
                  $(MB_HWT_LINKER_SCRIPT_FLAG) $(MB_HWT_CC_DEBUG_FLAG) $(MB_HWT_CC_PROFILE_FLAG) 

#################################################################
# SOFTWARE APPLICATION EMBEDDABLE
#################################################################

EMBEDDABLE_SOURCES = my_sw/embeddable.c my_sw/proc_hw_thread.c 

EMBEDDABLE_HEADERS = my_sw/proc_hw_thread.h 

EMBEDDABLE_CC = mb-gcc
EMBEDDABLE_CC_SIZE = mb-size
EMBEDDABLE_CC_OPT = -O2
EMBEDDABLE_CFLAGS = 
EMBEDDABLE_CC_SEARCH = # -B
EMBEDDABLE_LIBPATH = -L./microblaze_0/lib/ # -L
EMBEDDABLE_INCLUDES = -I./microblaze_0/include/  -Imy_sw/ # -I
EMBEDDABLE_LFLAGS = # -l
EMBEDDABLE_LINKER_SCRIPT = 
EMBEDDABLE_LINKER_SCRIPT_FLAG = #-Wl,-T -Wl,$(EMBEDDABLE_LINKER_SCRIPT) 
EMBEDDABLE_CC_DEBUG_FLAG =  -g 
EMBEDDABLE_CC_PROFILE_FLAG = # -pg
EMBEDDABLE_CC_GLOBPTR_FLAG= # -mxl-gp-opt
EMBEDDABLE_MODE = executable
EMBEDDABLE_LIBG_OPT = -$(EMBEDDABLE_MODE) microblaze_0
EMBEDDABLE_CC_INFERRED_FLAGS= -mno-xl-soft-mul -mxl-pattern-compare -mcpu=v7.10.d 
EMBEDDABLE_CC_START_ADDR_FLAG=  # -Wl,-defsym -Wl,_TEXT_START_ADDR=
EMBEDDABLE_CC_STACK_SIZE_FLAG=  # -Wl,-defsym -Wl,_STACK_SIZE=
EMBEDDABLE_CC_HEAP_SIZE_FLAG=  # -Wl,-defsym -Wl,_HEAP_SIZE=
EMBEDDABLE_OTHER_CC_FLAGS= $(EMBEDDABLE_CC_GLOBPTR_FLAG)  \
                  $(EMBEDDABLE_CC_START_ADDR_FLAG) $(EMBEDDABLE_CC_STACK_SIZE_FLAG) $(EMBEDDABLE_CC_HEAP_SIZE_FLAG)  \
                  $(EMBEDDABLE_CC_INFERRED_FLAGS)  \
                  $(EMBEDDABLE_LINKER_SCRIPT_FLAG) $(EMBEDDABLE_CC_DEBUG_FLAG) $(EMBEDDABLE_CC_PROFILE_FLAG) 

#################################################################
# SOFTWARE APPLICATION MB_HWT1
#################################################################

MB_HWT1_SOURCES = my_sw/hw_thread.c my_sw/proc_hw_thread.c 

MB_HWT1_HEADERS = my_sw/proc_hw_thread.h 

MB_HWT1_CC = mb-gcc
MB_HWT1_CC_SIZE = mb-size
MB_HWT1_CC_OPT = -O2
MB_HWT1_CFLAGS = 
MB_HWT1_CC_SEARCH = # -B
MB_HWT1_LIBPATH = -L./microblaze_1/lib/ # -L
MB_HWT1_INCLUDES = -I./microblaze_1/include/  -Imy_sw/ # -I
MB_HWT1_LFLAGS = # -l
MB_HWT1_LINKER_SCRIPT = 
MB_HWT1_LINKER_SCRIPT_FLAG = #-Wl,-T -Wl,$(MB_HWT1_LINKER_SCRIPT) 
MB_HWT1_CC_DEBUG_FLAG =  -g 
MB_HWT1_CC_PROFILE_FLAG = # -pg
MB_HWT1_CC_GLOBPTR_FLAG= # -mxl-gp-opt
MB_HWT1_MODE = executable
MB_HWT1_LIBG_OPT = -$(MB_HWT1_MODE) microblaze_1
MB_HWT1_CC_INFERRED_FLAGS= -mno-xl-soft-mul -mxl-pattern-compare -mcpu=v7.10.d 
MB_HWT1_CC_START_ADDR_FLAG=  # -Wl,-defsym -Wl,_TEXT_START_ADDR=
MB_HWT1_CC_STACK_SIZE_FLAG=  # -Wl,-defsym -Wl,_STACK_SIZE=
MB_HWT1_CC_HEAP_SIZE_FLAG=  # -Wl,-defsym -Wl,_HEAP_SIZE=
MB_HWT1_OTHER_CC_FLAGS= $(MB_HWT1_CC_GLOBPTR_FLAG)  \
                  $(MB_HWT1_CC_START_ADDR_FLAG) $(MB_HWT1_CC_STACK_SIZE_FLAG) $(MB_HWT1_CC_HEAP_SIZE_FLAG)  \
                  $(MB_HWT1_CC_INFERRED_FLAGS)  \
                  $(MB_HWT1_LINKER_SCRIPT_FLAG) $(MB_HWT1_CC_DEBUG_FLAG) $(MB_HWT1_CC_PROFILE_FLAG) 

#################################################################
# SOFTWARE APPLICATION MB_HWT2
#################################################################

MB_HWT2_SOURCES = my_sw/hw_thread.c my_sw/proc_hw_thread.c 

MB_HWT2_HEADERS = my_sw/proc_hw_thread.h 

MB_HWT2_CC = mb-gcc
MB_HWT2_CC_SIZE = mb-size
MB_HWT2_CC_OPT = -O2
MB_HWT2_CFLAGS = 
MB_HWT2_CC_SEARCH = # -B
MB_HWT2_LIBPATH = -L./microblaze_2a/lib/ # -L
MB_HWT2_INCLUDES = -I./microblaze_2a/include/  -Imy_sw/ # -I
MB_HWT2_LFLAGS = # -l
MB_HWT2_LINKER_SCRIPT = 
MB_HWT2_LINKER_SCRIPT_FLAG = #-Wl,-T -Wl,$(MB_HWT2_LINKER_SCRIPT) 
MB_HWT2_CC_DEBUG_FLAG =  -g 
MB_HWT2_CC_PROFILE_FLAG = # -pg
MB_HWT2_CC_GLOBPTR_FLAG= # -mxl-gp-opt
MB_HWT2_MODE = executable
MB_HWT2_LIBG_OPT = -$(MB_HWT2_MODE) microblaze_2a
MB_HWT2_CC_INFERRED_FLAGS= -mno-xl-soft-mul -mxl-pattern-compare -mcpu=v7.10.d 
MB_HWT2_CC_START_ADDR_FLAG=  # -Wl,-defsym -Wl,_TEXT_START_ADDR=
MB_HWT2_CC_STACK_SIZE_FLAG=  # -Wl,-defsym -Wl,_STACK_SIZE=
MB_HWT2_CC_HEAP_SIZE_FLAG=  # -Wl,-defsym -Wl,_HEAP_SIZE=
MB_HWT2_OTHER_CC_FLAGS= $(MB_HWT2_CC_GLOBPTR_FLAG)  \
                  $(MB_HWT2_CC_START_ADDR_FLAG) $(MB_HWT2_CC_STACK_SIZE_FLAG) $(MB_HWT2_CC_HEAP_SIZE_FLAG)  \
                  $(MB_HWT2_CC_INFERRED_FLAGS)  \
                  $(MB_HWT2_LINKER_SCRIPT_FLAG) $(MB_HWT2_CC_DEBUG_FLAG) $(MB_HWT2_CC_PROFILE_FLAG) 

#################################################################
# SOFTWARE APPLICATION MB_HWT3
#################################################################

MB_HWT3_SOURCES = my_sw/hw_thread.c my_sw/proc_hw_thread.c 

MB_HWT3_HEADERS = my_sw/proc_hw_thread.h 

MB_HWT3_CC = mb-gcc
MB_HWT3_CC_SIZE = mb-size
MB_HWT3_CC_OPT = -O2
MB_HWT3_CFLAGS = 
MB_HWT3_CC_SEARCH = # -B
MB_HWT3_LIBPATH = -L./microblaze_3a/lib/ # -L
MB_HWT3_INCLUDES = -I./microblaze_3a/include/  -Imy_sw/ # -I
MB_HWT3_LFLAGS = # -l
MB_HWT3_LINKER_SCRIPT = 
MB_HWT3_LINKER_SCRIPT_FLAG = #-Wl,-T -Wl,$(MB_HWT3_LINKER_SCRIPT) 
MB_HWT3_CC_DEBUG_FLAG =  -g 
MB_HWT3_CC_PROFILE_FLAG = # -pg
MB_HWT3_CC_GLOBPTR_FLAG= # -mxl-gp-opt
MB_HWT3_MODE = executable
MB_HWT3_LIBG_OPT = -$(MB_HWT3_MODE) microblaze_3a
MB_HWT3_CC_INFERRED_FLAGS= -mno-xl-soft-mul -mxl-pattern-compare -mcpu=v7.10.d 
MB_HWT3_CC_START_ADDR_FLAG=  # -Wl,-defsym -Wl,_TEXT_START_ADDR=
MB_HWT3_CC_STACK_SIZE_FLAG=  # -Wl,-defsym -Wl,_STACK_SIZE=
MB_HWT3_CC_HEAP_SIZE_FLAG=  # -Wl,-defsym -Wl,_HEAP_SIZE=
MB_HWT3_OTHER_CC_FLAGS= $(MB_HWT3_CC_GLOBPTR_FLAG)  \
                  $(MB_HWT3_CC_START_ADDR_FLAG) $(MB_HWT3_CC_STACK_SIZE_FLAG) $(MB_HWT3_CC_HEAP_SIZE_FLAG)  \
                  $(MB_HWT3_CC_INFERRED_FLAGS)  \
                  $(MB_HWT3_LINKER_SCRIPT_FLAG) $(MB_HWT3_CC_DEBUG_FLAG) $(MB_HWT3_CC_PROFILE_FLAG) 

#################################################################
# SOFTWARE APPLICATION EMBEDDABLE_COMPAT
#################################################################

EMBEDDABLE_COMPAT_SOURCES = mb_thread_lib/embeddable.c mb_thread_lib/mutex.c mb_thread_lib/proc_hw_thread.c 

EMBEDDABLE_COMPAT_HEADERS = mb_thread_lib/mutex.h mb_thread_lib/proc_hw_const.h mb_thread_lib/proc_hw_thread.h mb_thread_lib/proc_hthread.h mb_thread_lib/rops.h 

EMBEDDABLE_COMPAT_CC = mb-gcc
EMBEDDABLE_COMPAT_CC_SIZE = mb-size
EMBEDDABLE_COMPAT_CC_OPT = -O2
EMBEDDABLE_COMPAT_CFLAGS = -fPIC
EMBEDDABLE_COMPAT_CC_SEARCH = # -B
EMBEDDABLE_COMPAT_LIBPATH = -L./microblaze_3a/lib/ # -L
EMBEDDABLE_COMPAT_INCLUDES = -I./microblaze_3a/include/  -Imb_thread_lib/ # -I
EMBEDDABLE_COMPAT_LFLAGS = # -l
EMBEDDABLE_COMPAT_LINKER_SCRIPT = 
EMBEDDABLE_COMPAT_LINKER_SCRIPT_FLAG = #-Wl,-T -Wl,$(EMBEDDABLE_COMPAT_LINKER_SCRIPT) 
EMBEDDABLE_COMPAT_CC_DEBUG_FLAG =  -g 
EMBEDDABLE_COMPAT_CC_PROFILE_FLAG = # -pg
EMBEDDABLE_COMPAT_CC_GLOBPTR_FLAG= # -mxl-gp-opt
EMBEDDABLE_COMPAT_MODE = executable
EMBEDDABLE_COMPAT_LIBG_OPT = -$(EMBEDDABLE_COMPAT_MODE) microblaze_3a
EMBEDDABLE_COMPAT_CC_INFERRED_FLAGS= -mno-xl-soft-mul -mxl-pattern-compare -mcpu=v7.10.d 
EMBEDDABLE_COMPAT_CC_START_ADDR_FLAG=  # -Wl,-defsym -Wl,_TEXT_START_ADDR=
EMBEDDABLE_COMPAT_CC_STACK_SIZE_FLAG=  # -Wl,-defsym -Wl,_STACK_SIZE=
EMBEDDABLE_COMPAT_CC_HEAP_SIZE_FLAG=  # -Wl,-defsym -Wl,_HEAP_SIZE=
EMBEDDABLE_COMPAT_OTHER_CC_FLAGS= $(EMBEDDABLE_COMPAT_CC_GLOBPTR_FLAG)  \
                  $(EMBEDDABLE_COMPAT_CC_START_ADDR_FLAG) $(EMBEDDABLE_COMPAT_CC_STACK_SIZE_FLAG) $(EMBEDDABLE_COMPAT_CC_HEAP_SIZE_FLAG)  \
                  $(EMBEDDABLE_COMPAT_CC_INFERRED_FLAGS)  \
                  $(EMBEDDABLE_COMPAT_LINKER_SCRIPT_FLAG) $(EMBEDDABLE_COMPAT_CC_DEBUG_FLAG) $(EMBEDDABLE_COMPAT_CC_PROFILE_FLAG) 

#################################################################
# SOFTWARE APPLICATION HIST_THREAD
#################################################################

HIST_THREAD_SOURCES = thread_bodies/histogram.c 

HIST_THREAD_HEADERS = 

HIST_THREAD_CC = mb-gcc
HIST_THREAD_CC_SIZE = mb-size
HIST_THREAD_CC_OPT = -O2
HIST_THREAD_CFLAGS = 
HIST_THREAD_CC_SEARCH = # -B
HIST_THREAD_LIBPATH = -L./microblaze_3a/lib/ # -L
HIST_THREAD_INCLUDES = -I./microblaze_3a/include/ # -I
HIST_THREAD_LFLAGS = # -l
HIST_THREAD_LINKER_SCRIPT = 
HIST_THREAD_LINKER_SCRIPT_FLAG = #-Wl,-T -Wl,$(HIST_THREAD_LINKER_SCRIPT) 
HIST_THREAD_CC_DEBUG_FLAG =  -g 
HIST_THREAD_CC_PROFILE_FLAG = # -pg
HIST_THREAD_CC_GLOBPTR_FLAG= # -mxl-gp-opt
HIST_THREAD_MODE = executable
HIST_THREAD_LIBG_OPT = -$(HIST_THREAD_MODE) microblaze_3a
HIST_THREAD_CC_INFERRED_FLAGS= -mno-xl-soft-mul -mxl-pattern-compare -mcpu=v7.10.d 
HIST_THREAD_CC_START_ADDR_FLAG=  # -Wl,-defsym -Wl,_TEXT_START_ADDR=
HIST_THREAD_CC_STACK_SIZE_FLAG=  # -Wl,-defsym -Wl,_STACK_SIZE=
HIST_THREAD_CC_HEAP_SIZE_FLAG=  # -Wl,-defsym -Wl,_HEAP_SIZE=
HIST_THREAD_OTHER_CC_FLAGS= $(HIST_THREAD_CC_GLOBPTR_FLAG)  \
                  $(HIST_THREAD_CC_START_ADDR_FLAG) $(HIST_THREAD_CC_STACK_SIZE_FLAG) $(HIST_THREAD_CC_HEAP_SIZE_FLAG)  \
                  $(HIST_THREAD_CC_INFERRED_FLAGS)  \
                  $(HIST_THREAD_LINKER_SCRIPT_FLAG) $(HIST_THREAD_CC_DEBUG_FLAG) $(HIST_THREAD_CC_PROFILE_FLAG) 
