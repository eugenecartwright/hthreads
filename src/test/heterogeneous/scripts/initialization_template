// Allocate memory
unsigned int e = 0, k = 0;
for ( k = 0; k < @; k++) {
    package[k].sort_data = (void *) malloc(sizeof(int) * package[k].sort_size);
    package[k].crc_data = (void *) malloc(sizeof(int) * package[k].crc_size);
    package[k].crc_data_check = (void *) malloc(sizeof(int) * package[k].crc_size);
    package[k].dataA = (void *) malloc(sizeof(int) * package[k].vector_size);
    package[k].dataB = (void *) malloc(sizeof(int) * package[k].vector_size);
    package[k].dataC = (void *) malloc(sizeof(int) * package[k].vector_size);
    package[k].sort_valid = (Huint *) malloc(sizeof(Huint));
    package[k].crc_valid = (Huint *) malloc(sizeof(Huint));
    package[k].vector_valid = (Huint *) malloc(sizeof(Huint));

    // Check to see if we were able to allocate said memory
    assert(package[k].sort_valid != NULL);
    assert(package[k].crc_valid != NULL);
    assert(package[k].vector_valid != NULL);

    assert(package[k].sort_data != NULL);
    assert(package[k].crc_data != NULL);
    assert(package[k].dataA != NULL);
    assert(package[k].dataB != NULL);
    assert(package[k].dataC != NULL);

    // Initialize all the valid signals to zero
    *(package[k].sort_valid) = 0;
    *(package[k].crc_valid) = 0;
    *(package[k].vector_valid) = 0;

    // Initialize the CRC data here
    for (e = 0; e < package[k].crc_size; e++) { 
        Hint * data = (Hint *) package[k].crc_data;
        Hint * data_check = (Hint *) package[k].crc_data_check;
        data[e] = data_check[e] = (rand() % 1000) * 8;
    }
    
    // Initialize Vector Data 
    for (e = 0; e < package[k].vector_size; e++) {
        Hint * dataA = package[k].dataA;
        Hint * dataB = package[k].dataB;
        Hint * dataC = package[k].dataC;
        dataA[e] = rand() % 1000;
        dataB[e] = rand() % 1000;
        dataC[e] = 0;
    }

    // Initialize Sort Data 
    for (e = 0; e < package[k].sort_size; e++) {
        Hint * sort_data = (Hint *) package[k].sort_data;
        sort_data[e] = package[k].sort_size - e;
    }
}

