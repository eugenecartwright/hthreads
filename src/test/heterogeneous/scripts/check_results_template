#if 0
   for (e = 0; e < @; e++) {
      // Determine which slave ran this thread based on address
      Huint base = attr[e].hardware_addr - HT_HWTI_COMMAND_OFFSET;
      Huint slave_num = (base & 0x00FF0000) >> 16;
      printf("Thread %03d -> Slave : %02d\n", e, slave_num);
   }
#endif

int number_of_errors = 0;
for (e = 0; e < @; e++) {
    // Check SORT for this package
    if (*(package[e].sort_valid)) {
        unsigned int b = 0;
        Hint * sorted_list = package[e].sort_data;
        for (b = 0; b < package[e].sort_size-1; b++) {
            if (sorted_list[b] > sorted_list[b+1]) {
                number_of_errors++;
                printf("\tSORT: Package %u failed\n", e);
                break;
            }
        }
    }
    
    // Check CRC for this package
    if (*(package[e].crc_valid)) {
        unsigned int b = 0;
        Hint * crc = (Hint *) package[e].crc_data;
        Hint * crc_check = (Hint *) package[e].crc_data_check;

        poly_crc((void *) crc_check, package[e].crc_size);

        for (b = 0; b < package[e].crc_size; b++) {
            if (crc[b] != crc_check[b]) {
                printf("\tCRC: Package %u failed\n", e);
                number_of_errors++;
                break;
            }
        }
    }

    // Check VectorAdd for this package
    if (*(package[e].vectoradd_valid)) {
        unsigned int b = 0;
        Hint * A = (Hint *) package[e].dataA;
        Hint * B = (Hint *) package[e].dataB;
        Hint * C = (Hint *) package[e].dataC;
        for (b = 0; b < package[e].vectoradd_size; b++) {
            if (C[b] != A[b] +B[b]) { 
                printf("\tVectorAdd: Package %u failed\n", e);
                number_of_errors++;
                break;
            }
        }
    }
    
    // Check VectorSub for this package
    if (*(package[e].vectorsub_valid)) {
        unsigned int b = 0;
        Hint * A = (Hint *) package[e].dataA;
        Hint * B = (Hint *) package[e].dataB;
        Hint * C = (Hint *) package[e].dataC;
        for (b = 0; b < package[e].vectorsub_size; b++) {
            if (C[b] != A[b] -B[b]) { 
                printf("\tVectorSub: Package %u failed\n", e);
                number_of_errors++;
                break;
            }
        }
    }

    // Check VectorMul for this package
    if (*(package[e].vectormul_valid)) {
        unsigned int b = 0;
        Hint * A = (Hint *) package[e].dataA;
        Hint * B = (Hint *) package[e].dataB;
        Hint * C = (Hint *) package[e].dataC;
        for (b = 0; b < package[e].vectormul_size; b++) {
            if (C[b] != A[b] *B[b]) { 
                printf("\tVectorMul: Package %u failed\n", e);
                number_of_errors++;
                break;
            }
        }
    }
}

printf("---------------------------\n");
printf("\nNumber of Errors = %d\n\n", number_of_errors);
