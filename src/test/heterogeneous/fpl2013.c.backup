/* File: regression_accelerator_test.c
 * Author: Eugene Cartwright 
 * Description: This program simply runs through
 * variable data sizes for each accelerator function:
 * Creates NUM_AVAILABLE_HETERO_CPUS threads either
 * dynamically or statically, and checks the result
 * for each thread against a host calculated result. */

#include <hthread.h>
#include <stdio.h>
#include <accelerator.h>
#include <arch/htime.h>
#include "tuning_table.h"

//#define DEBUG_DISPATCH
#define OPCODE_FLAGGING
#define CHECK_FIRST_POLYMORPHIC
//#define FORCE_POLYMORPHIC_HW
//#define FORCE_POLYMORPHIC_SW

//#define BASE_CASE


//void * worker_crc1_thread( void * arg);
//void * worker_sort1_thread( void * arg);
//void * worker_vector1_thread( void * arg);

// Primitives
void * worker_crc_thread( void * arg);
void * worker_sort_thread( void * arg);
void * worker_vectoradd_thread( void * arg);
void * worker_vectorsub_thread( void * arg);
void * worker_vectormul_thread( void * arg);

void * worker_sort_crc_thread( void * arg);
void * worker_sort_vectoradd_thread( void * arg);
void * worker_sort_vectorsub_thread( void * arg);
void * worker_sort_vectormul_thread( void * arg);
void * worker_crc_sort_thread( void * arg);
void * worker_crc_vectoradd_thread( void * arg);
void * worker_crc_vectorsub_thread( void * arg);
void * worker_crc_vectormul_thread( void * arg);
void * worker_vectoradd_sort_thread( void * arg);
void * worker_vectorsub_sort_thread( void * arg);
void * worker_vectormul_sort_thread( void * arg);
void * worker_vectoradd_crc_thread( void * arg);
void * worker_vectorsub_crc_thread( void * arg);
void * worker_vectormul_crc_thread( void * arg);
void * worker_vectoradd_crc_sort_thread( void * arg);
void * worker_vectorsub_crc_sort_thread( void * arg);
void * worker_vectormul_crc_sort_thread( void * arg);
void * worker_vectoradd_sort_crc_thread( void * arg);
void * worker_vectorsub_sort_crc_thread( void * arg);
void * worker_vectormul_sort_crc_thread( void * arg);
void * worker_crc_vectoradd_sort_thread( void * arg);
void * worker_crc_vectorsub_sort_thread( void * arg);
void * worker_crc_vectormul_sort_thread( void * arg);
void * worker_crc_sort_vectoradd_thread( void * arg);
void * worker_crc_sort_vectorsub_thread( void * arg);
void * worker_crc_sort_vectormul_thread( void * arg);
void * worker_sort_crc_vectoradd_thread( void * arg);
void * worker_sort_crc_vectorsub_thread( void * arg);
void * worker_sort_crc_vectormul_thread( void * arg);
void * worker_sort_vectoradd_crc_thread( void * arg);
void * worker_sort_vectorsub_crc_thread( void * arg);
void * worker_sort_vectormul_crc_thread( void * arg);

#ifndef HETERO_COMPILATION
#include "fpl2013_prog.h"
#include <arch/htime.h>
#endif

#include "fpl2013.h"

/*******************************
 * Top Level accelerator calls
 * *****************************/



#ifndef HETERO_COMPILATION
hthread_time_t start PRIVATE_MEMORY;
hthread_time_t stop PRIVATE_MEMORY;
int main(){

   init_host_tables();
   printf("*********************************************************\n");
   printf("*               Accelerator Regression Test             *\n");
   printf("*                                                       *\n");
   printf("*                Author: Eugene Cartwright              *\n");
   printf("*********************************************************\n");
   #ifdef OPCODE_FLAGGING
   printf("Opcode flagging enabled\n");
   #else
   printf("Opcode flagging disabled\n");
   #endif
   #ifdef CHECK_FIRST_POLYMORPHIC
   printf("CHECK FIRST POLYMORPHIC FUNCTION enabled\n");
   #else
   printf("CHECK FIRST POLYMORPHIC FUNCTION disabled\n");
   #endif
   #ifdef FORCE_POLYMORPHIC_HW
   printf("Forcing slaves to choose HARDWARE for polymorphic functions\n");
   #elif defined FORCE_POLYMORPHIC_SW
   printf("Forcing slaves to choose SOFTWARE for polymorphic functions\n");
   #else
   printf("Slaves will decide between HW or SW for polymorphic functions\n");
   #endif

   unsigned int b = 0;
   // Customize Accelerators here according to your platform setup
   assert(perform_PR(0,CRC) == SUCCESS);
   assert(perform_PR(1,VECTORDIV) == SUCCESS);
   assert(perform_PR(2,MATRIXMUL) == SUCCESS);
   assert(perform_PR(3,VECTORADD) == SUCCESS);
   assert(perform_PR(4,VECTORSUB) == SUCCESS);
   assert(perform_PR(5,BUBBLESORT) == SUCCESS);
   assert(perform_PR(6,VECTORDIV) == SUCCESS);
   assert(perform_PR(7,MATRIXMUL) == SUCCESS);
   assert(perform_PR(8,VECTORADD) == SUCCESS);
   assert(perform_PR(9,VECTORDIV) == SUCCESS);
   assert(perform_PR(10,MATRIXMUL) == SUCCESS);
   assert(perform_PR(11,VECTORADD) == SUCCESS);
   assert(perform_PR(12,CRC) == SUCCESS);
   assert(perform_PR(13,VECTORSUB) == SUCCESS);
   // Update table of last known accelerators
   slave_table[0].acc = CRC;
   slave_table[1].acc = VECTORDIV;
   slave_table[2].acc = MATRIXMUL;
   slave_table[3].acc = VECTORADD;
   slave_table[4].acc = VECTORSUB;
   slave_table[5].acc = BUBBLESORT;
   slave_table[6].acc = VECTORDIV;
   slave_table[7].acc = MATRIXMUL;
   slave_table[8].acc = VECTORADD;
   slave_table[9].acc = VECTORDIV;
   slave_table[10].acc = MATRIXMUL;
   slave_table[11].acc = VECTORADD;
   slave_table[12].acc = CRC;
   slave_table[13].acc = VECTORSUB;
 
   // Specify PR  
   _hwti_set_PR_flag((Huint) hwti_array[0], PR_FLAG);
   _hwti_set_PR_flag((Huint) hwti_array[1], PR_FLAG);
   _hwti_set_PR_flag((Huint) hwti_array[2], PR_FLAG);
   _hwti_set_PR_flag((Huint) hwti_array[3], PR_FLAG);
   _hwti_set_PR_flag((Huint) hwti_array[4], PR_FLAG);
   _hwti_set_PR_flag((Huint) hwti_array[5], PR_FLAG);
   _hwti_set_PR_flag((Huint) hwti_array[6], PR_FLAG);
   _hwti_set_PR_flag((Huint) hwti_array[7], PR_FLAG);
   _hwti_set_PR_flag((Huint) hwti_array[8], PR_FLAG);
   _hwti_set_PR_flag((Huint) hwti_array[9], PR_FLAG);
   _hwti_set_PR_flag((Huint) hwti_array[10], PR_FLAG);
   _hwti_set_PR_flag((Huint) hwti_array[11], PR_FLAG);
   _hwti_set_PR_flag((Huint) hwti_array[12], PR_FLAG);
   _hwti_set_PR_flag((Huint) hwti_array[13], PR_FLAG);
   slave_table[0].pr = PR_FLAG;
   slave_table[1].pr = PR_FLAG;
   slave_table[2].pr = PR_FLAG;
   slave_table[3].pr = PR_FLAG;
   slave_table[4].pr = PR_FLAG;
   slave_table[5].pr = PR_FLAG;
   slave_table[6].pr = PR_FLAG;
   slave_table[7].pr = PR_FLAG;
   slave_table[8].pr = PR_FLAG;
   slave_table[9].pr = PR_FLAG;
   slave_table[10].pr = PR_FLAG;
   slave_table[11].pr = PR_FLAG;
   slave_table[12].pr = PR_FLAG;
   slave_table[13].pr = PR_FLAG;
   //_hwti_set_last_accelerator((Huint) hwti_array[0], NO_ACC);
   //_hwti_set_last_accelerator((Huint) hwti_array[2], NO_ACC);


   for (b = 0; b < NUM_AVAILABLE_HETERO_CPUS; b++) {
      #ifdef BASE_CASE
      // No accelerators, no PR
      _hwti_set_PR_flag( (Huint) hwti_array[b], 0);
      _hwti_set_last_accelerator((Huint) hwti_array[b], NO_ACC);
      #endif
   }


	// Instantiate threads and thread attribute structures
	hthread_t threads[197];
	hthread_attr_t attr[197];
	unsigned int ee = 0;
	for(ee = 0; ee < 197; ee++) {
		hthread_attr_init(&attr[ee]);
		hthread_attr_setdetachstate(&attr[ee], HTHREAD_CREATE_DETACHED);
	}

	volatile Data package[197];
	/*************** Package 0 **********/
	// Initalize the size for this package
	package[0].sort_size = 512;
	package[0].crc_size = 64;
	package[0].vectoradd_size = 2048;
	package[0].vectorsub_size = 2048;
	package[0].vectormul_size = 2048;
	
	/*************** Package 1 **********/
	// Initalize the size for this package
	package[1].sort_size = 2048;
	package[1].crc_size = 4095;
	package[1].vectoradd_size = 1024;
	package[1].vectorsub_size = 1024;
	package[1].vectormul_size = 1024;
	
	/*************** Package 2 **********/
	// Initalize the size for this package
	package[2].sort_size = 64;
	package[2].crc_size = 3500;
	package[2].vectoradd_size = 3500;
	package[2].vectorsub_size = 3500;
	package[2].vectormul_size = 3500;
	
	/*************** Package 3 **********/
	// Initalize the size for this package
	package[3].sort_size = 4095;
	package[3].crc_size = 512;
	package[3].vectoradd_size = 512;
	package[3].vectorsub_size = 512;
	package[3].vectormul_size = 512;
	
	/*************** Package 4 **********/
	// Initalize the size for this package
	package[4].sort_size = 64;
	package[4].crc_size = 4095;
	package[4].vectoradd_size = 512;
	package[4].vectorsub_size = 512;
	package[4].vectormul_size = 512;
	
	/*************** Package 5 **********/
	// Initalize the size for this package
	package[5].sort_size = 4095;
	package[5].crc_size = 64;
	package[5].vectoradd_size = 64;
	package[5].vectorsub_size = 64;
	package[5].vectormul_size = 64;
	
	/*************** Package 6 **********/
	// Initalize the size for this package
	package[6].sort_size = 2048;
	package[6].crc_size = 2048;
	package[6].vectoradd_size = 1024;
	package[6].vectorsub_size = 1024;
	package[6].vectormul_size = 1024;
	
	/*************** Package 7 **********/
	// Initalize the size for this package
	package[7].sort_size = 3500;
	package[7].crc_size = 512;
	package[7].vectoradd_size = 2048;
	package[7].vectorsub_size = 2048;
	package[7].vectormul_size = 2048;
	
	/*************** Package 8 **********/
	// Initalize the size for this package
	package[8].sort_size = 1024;
	package[8].crc_size = 3500;
	package[8].vectoradd_size = 512;
	package[8].vectorsub_size = 512;
	package[8].vectormul_size = 512;
	
	/*************** Package 9 **********/
	// Initalize the size for this package
	package[9].sort_size = 3500;
	package[9].crc_size = 1024;
	package[9].vectoradd_size = 3500;
	package[9].vectorsub_size = 3500;
	package[9].vectormul_size = 3500;
	
	/*************** Package 10 **********/
	// Initalize the size for this package
	package[10].sort_size = 4095;
	package[10].crc_size = 3500;
	package[10].vectoradd_size = 4095;
	package[10].vectorsub_size = 4095;
	package[10].vectormul_size = 4095;
	
	/*************** Package 11 **********/
	// Initalize the size for this package
	package[11].sort_size = 4095;
	package[11].crc_size = 4095;
	package[11].vectoradd_size = 512;
	package[11].vectorsub_size = 512;
	package[11].vectormul_size = 512;
	
	/*************** Package 12 **********/
	// Initalize the size for this package
	package[12].sort_size = 2048;
	package[12].crc_size = 4095;
	package[12].vectoradd_size = 3500;
	package[12].vectorsub_size = 3500;
	package[12].vectormul_size = 3500;
	
	/*************** Package 13 **********/
	// Initalize the size for this package
	package[13].sort_size = 64;
	package[13].crc_size = 4095;
	package[13].vectoradd_size = 64;
	package[13].vectorsub_size = 64;
	package[13].vectormul_size = 64;
	
	/*************** Package 14 **********/
	// Initalize the size for this package
	package[14].sort_size = 512;
	package[14].crc_size = 3500;
	package[14].vectoradd_size = 64;
	package[14].vectorsub_size = 64;
	package[14].vectormul_size = 64;
	
	/*************** Package 15 **********/
	// Initalize the size for this package
	package[15].sort_size = 512;
	package[15].crc_size = 2048;
	package[15].vectoradd_size = 512;
	package[15].vectorsub_size = 512;
	package[15].vectormul_size = 512;
	
	/*************** Package 16 **********/
	// Initalize the size for this package
	package[16].sort_size = 2048;
	package[16].crc_size = 2048;
	package[16].vectoradd_size = 512;
	package[16].vectorsub_size = 512;
	package[16].vectormul_size = 512;
	
	/*************** Package 17 **********/
	// Initalize the size for this package
	package[17].sort_size = 64;
	package[17].crc_size = 4095;
	package[17].vectoradd_size = 64;
	package[17].vectorsub_size = 64;
	package[17].vectormul_size = 64;
	
	/*************** Package 18 **********/
	// Initalize the size for this package
	package[18].sort_size = 4095;
	package[18].crc_size = 512;
	package[18].vectoradd_size = 3500;
	package[18].vectorsub_size = 3500;
	package[18].vectormul_size = 3500;
	
	/*************** Package 19 **********/
	// Initalize the size for this package
	package[19].sort_size = 3500;
	package[19].crc_size = 64;
	package[19].vectoradd_size = 3500;
	package[19].vectorsub_size = 3500;
	package[19].vectormul_size = 3500;
	
	/*************** Package 20 **********/
	// Initalize the size for this package
	package[20].sort_size = 4095;
	package[20].crc_size = 4095;
	package[20].vectoradd_size = 512;
	package[20].vectorsub_size = 512;
	package[20].vectormul_size = 512;
	
	/*************** Package 21 **********/
	// Initalize the size for this package
	package[21].sort_size = 64;
	package[21].crc_size = 2048;
	package[21].vectoradd_size = 512;
	package[21].vectorsub_size = 512;
	package[21].vectormul_size = 512;
	
	/*************** Package 22 **********/
	// Initalize the size for this package
	package[22].sort_size = 64;
	package[22].crc_size = 2048;
	package[22].vectoradd_size = 1024;
	package[22].vectorsub_size = 1024;
	package[22].vectormul_size = 1024;
	
	/*************** Package 23 **********/
	// Initalize the size for this package
	package[23].sort_size = 2048;
	package[23].crc_size = 2048;
	package[23].vectoradd_size = 512;
	package[23].vectorsub_size = 512;
	package[23].vectormul_size = 512;
	
	/*************** Package 24 **********/
	// Initalize the size for this package
	package[24].sort_size = 64;
	package[24].crc_size = 3500;
	package[24].vectoradd_size = 3500;
	package[24].vectorsub_size = 3500;
	package[24].vectormul_size = 3500;
	
	/*************** Package 25 **********/
	// Initalize the size for this package
	package[25].sort_size = 4095;
	package[25].crc_size = 1024;
	package[25].vectoradd_size = 64;
	package[25].vectorsub_size = 64;
	package[25].vectormul_size = 64;
	
	/*************** Package 26 **********/
	// Initalize the size for this package
	package[26].sort_size = 64;
	package[26].crc_size = 64;
	package[26].vectoradd_size = 64;
	package[26].vectorsub_size = 64;
	package[26].vectormul_size = 64;
	
	/*************** Package 27 **********/
	// Initalize the size for this package
	package[27].sort_size = 512;
	package[27].crc_size = 3500;
	package[27].vectoradd_size = 3500;
	package[27].vectorsub_size = 3500;
	package[27].vectormul_size = 3500;
	
	/*************** Package 28 **********/
	// Initalize the size for this package
	package[28].sort_size = 2048;
	package[28].crc_size = 1024;
	package[28].vectoradd_size = 1024;
	package[28].vectorsub_size = 1024;
	package[28].vectormul_size = 1024;
	
	/*************** Package 29 **********/
	// Initalize the size for this package
	package[29].sort_size = 3500;
	package[29].crc_size = 3500;
	package[29].vectoradd_size = 4095;
	package[29].vectorsub_size = 4095;
	package[29].vectormul_size = 4095;
	
	/*************** Package 30 **********/
	// Initalize the size for this package
	package[30].sort_size = 64;
	package[30].crc_size = 3500;
	package[30].vectoradd_size = 4095;
	package[30].vectorsub_size = 4095;
	package[30].vectormul_size = 4095;
	
	/*************** Package 31 **********/
	// Initalize the size for this package
	package[31].sort_size = 1024;
	package[31].crc_size = 1024;
	package[31].vectoradd_size = 3500;
	package[31].vectorsub_size = 3500;
	package[31].vectormul_size = 3500;
	
	/*************** Package 32 **********/
	// Initalize the size for this package
	package[32].sort_size = 4095;
	package[32].crc_size = 2048;
	package[32].vectoradd_size = 2048;
	package[32].vectorsub_size = 2048;
	package[32].vectormul_size = 2048;
	
	/*************** Package 33 **********/
	// Initalize the size for this package
	package[33].sort_size = 3500;
	package[33].crc_size = 3500;
	package[33].vectoradd_size = 512;
	package[33].vectorsub_size = 512;
	package[33].vectormul_size = 512;
	
	/*************** Package 34 **********/
	// Initalize the size for this package
	package[34].sort_size = 4095;
	package[34].crc_size = 3500;
	package[34].vectoradd_size = 4095;
	package[34].vectorsub_size = 4095;
	package[34].vectormul_size = 4095;
	
	/*************** Package 35 **********/
	// Initalize the size for this package
	package[35].sort_size = 64;
	package[35].crc_size = 3500;
	package[35].vectoradd_size = 512;
	package[35].vectorsub_size = 512;
	package[35].vectormul_size = 512;
	
	/*************** Package 36 **********/
	// Initalize the size for this package
	package[36].sort_size = 1024;
	package[36].crc_size = 1024;
	package[36].vectoradd_size = 3500;
	package[36].vectorsub_size = 3500;
	package[36].vectormul_size = 3500;
	
	/*************** Package 37 **********/
	// Initalize the size for this package
	package[37].sort_size = 3500;
	package[37].crc_size = 2048;
	package[37].vectoradd_size = 3500;
	package[37].vectorsub_size = 3500;
	package[37].vectormul_size = 3500;
	
	/*************** Package 38 **********/
	// Initalize the size for this package
	package[38].sort_size = 1024;
	package[38].crc_size = 4095;
	package[38].vectoradd_size = 1024;
	package[38].vectorsub_size = 1024;
	package[38].vectormul_size = 1024;
	
	/*************** Package 39 **********/
	// Initalize the size for this package
	package[39].sort_size = 2048;
	package[39].crc_size = 3500;
	package[39].vectoradd_size = 3500;
	package[39].vectorsub_size = 3500;
	package[39].vectormul_size = 3500;
	
	/*************** Package 40 **********/
	// Initalize the size for this package
	package[40].sort_size = 2048;
	package[40].crc_size = 2048;
	package[40].vectoradd_size = 1024;
	package[40].vectorsub_size = 1024;
	package[40].vectormul_size = 1024;
	
	/*************** Package 41 **********/
	// Initalize the size for this package
	package[41].sort_size = 2048;
	package[41].crc_size = 64;
	package[41].vectoradd_size = 2048;
	package[41].vectorsub_size = 2048;
	package[41].vectormul_size = 2048;
	
	/*************** Package 42 **********/
	// Initalize the size for this package
	package[42].sort_size = 64;
	package[42].crc_size = 512;
	package[42].vectoradd_size = 512;
	package[42].vectorsub_size = 512;
	package[42].vectormul_size = 512;
	
	/*************** Package 43 **********/
	// Initalize the size for this package
	package[43].sort_size = 1024;
	package[43].crc_size = 64;
	package[43].vectoradd_size = 512;
	package[43].vectorsub_size = 512;
	package[43].vectormul_size = 512;
	
	/*************** Package 44 **********/
	// Initalize the size for this package
	package[44].sort_size = 64;
	package[44].crc_size = 3500;
	package[44].vectoradd_size = 2048;
	package[44].vectorsub_size = 2048;
	package[44].vectormul_size = 2048;
	
	/*************** Package 45 **********/
	// Initalize the size for this package
	package[45].sort_size = 64;
	package[45].crc_size = 512;
	package[45].vectoradd_size = 1024;
	package[45].vectorsub_size = 1024;
	package[45].vectormul_size = 1024;
	
	/*************** Package 46 **********/
	// Initalize the size for this package
	package[46].sort_size = 3500;
	package[46].crc_size = 3500;
	package[46].vectoradd_size = 64;
	package[46].vectorsub_size = 64;
	package[46].vectormul_size = 64;
	
	/*************** Package 47 **********/
	// Initalize the size for this package
	package[47].sort_size = 2048;
	package[47].crc_size = 64;
	package[47].vectoradd_size = 4095;
	package[47].vectorsub_size = 4095;
	package[47].vectormul_size = 4095;
	
	/*************** Package 48 **********/
	// Initalize the size for this package
	package[48].sort_size = 2048;
	package[48].crc_size = 64;
	package[48].vectoradd_size = 4095;
	package[48].vectorsub_size = 4095;
	package[48].vectormul_size = 4095;
	
	/*************** Package 49 **********/
	// Initalize the size for this package
	package[49].sort_size = 3500;
	package[49].crc_size = 512;
	package[49].vectoradd_size = 1024;
	package[49].vectorsub_size = 1024;
	package[49].vectormul_size = 1024;
	
	/*************** Package 50 **********/
	// Initalize the size for this package
	package[50].sort_size = 3500;
	package[50].crc_size = 1024;
	package[50].vectoradd_size = 4095;
	package[50].vectorsub_size = 4095;
	package[50].vectormul_size = 4095;
	
	/*************** Package 51 **********/
	// Initalize the size for this package
	package[51].sort_size = 1024;
	package[51].crc_size = 1024;
	package[51].vectoradd_size = 4095;
	package[51].vectorsub_size = 4095;
	package[51].vectormul_size = 4095;
	
	/*************** Package 52 **********/
	// Initalize the size for this package
	package[52].sort_size = 1024;
	package[52].crc_size = 2048;
	package[52].vectoradd_size = 64;
	package[52].vectorsub_size = 64;
	package[52].vectormul_size = 64;
	
	/*************** Package 53 **********/
	// Initalize the size for this package
	package[53].sort_size = 1024;
	package[53].crc_size = 1024;
	package[53].vectoradd_size = 64;
	package[53].vectorsub_size = 64;
	package[53].vectormul_size = 64;
	
	/*************** Package 54 **********/
	// Initalize the size for this package
	package[54].sort_size = 64;
	package[54].crc_size = 1024;
	package[54].vectoradd_size = 2048;
	package[54].vectorsub_size = 2048;
	package[54].vectormul_size = 2048;
	
	/*************** Package 55 **********/
	// Initalize the size for this package
	package[55].sort_size = 1024;
	package[55].crc_size = 512;
	package[55].vectoradd_size = 2048;
	package[55].vectorsub_size = 2048;
	package[55].vectormul_size = 2048;
	
	/*************** Package 56 **********/
	// Initalize the size for this package
	package[56].sort_size = 3500;
	package[56].crc_size = 64;
	package[56].vectoradd_size = 2048;
	package[56].vectorsub_size = 2048;
	package[56].vectormul_size = 2048;
	
	/*************** Package 57 **********/
	// Initalize the size for this package
	package[57].sort_size = 4095;
	package[57].crc_size = 2048;
	package[57].vectoradd_size = 2048;
	package[57].vectorsub_size = 2048;
	package[57].vectormul_size = 2048;
	
	/*************** Package 58 **********/
	// Initalize the size for this package
	package[58].sort_size = 3500;
	package[58].crc_size = 512;
	package[58].vectoradd_size = 3500;
	package[58].vectorsub_size = 3500;
	package[58].vectormul_size = 3500;
	
	/*************** Package 59 **********/
	// Initalize the size for this package
	package[59].sort_size = 64;
	package[59].crc_size = 4095;
	package[59].vectoradd_size = 512;
	package[59].vectorsub_size = 512;
	package[59].vectormul_size = 512;
	
	/*************** Package 60 **********/
	// Initalize the size for this package
	package[60].sort_size = 4095;
	package[60].crc_size = 2048;
	package[60].vectoradd_size = 1024;
	package[60].vectorsub_size = 1024;
	package[60].vectormul_size = 1024;
	
	/*************** Package 61 **********/
	// Initalize the size for this package
	package[61].sort_size = 512;
	package[61].crc_size = 3500;
	package[61].vectoradd_size = 512;
	package[61].vectorsub_size = 512;
	package[61].vectormul_size = 512;
	
	/*************** Package 62 **********/
	// Initalize the size for this package
	package[62].sort_size = 2048;
	package[62].crc_size = 4095;
	package[62].vectoradd_size = 512;
	package[62].vectorsub_size = 512;
	package[62].vectormul_size = 512;
	
	/*************** Package 63 **********/
	// Initalize the size for this package
	package[63].sort_size = 2048;
	package[63].crc_size = 3500;
	package[63].vectoradd_size = 512;
	package[63].vectorsub_size = 512;
	package[63].vectormul_size = 512;
	
	/*************** Package 64 **********/
	// Initalize the size for this package
	package[64].sort_size = 3500;
	package[64].crc_size = 64;
	package[64].vectoradd_size = 3500;
	package[64].vectorsub_size = 3500;
	package[64].vectormul_size = 3500;
	
	/*************** Package 65 **********/
	// Initalize the size for this package
	package[65].sort_size = 512;
	package[65].crc_size = 3500;
	package[65].vectoradd_size = 512;
	package[65].vectorsub_size = 512;
	package[65].vectormul_size = 512;
	
	/*************** Package 66 **********/
	// Initalize the size for this package
	package[66].sort_size = 1024;
	package[66].crc_size = 3500;
	package[66].vectoradd_size = 2048;
	package[66].vectorsub_size = 2048;
	package[66].vectormul_size = 2048;
	
	/*************** Package 67 **********/
	// Initalize the size for this package
	package[67].sort_size = 512;
	package[67].crc_size = 4095;
	package[67].vectoradd_size = 2048;
	package[67].vectorsub_size = 2048;
	package[67].vectormul_size = 2048;
	
	/*************** Package 68 **********/
	// Initalize the size for this package
	package[68].sort_size = 4095;
	package[68].crc_size = 3500;
	package[68].vectoradd_size = 64;
	package[68].vectorsub_size = 64;
	package[68].vectormul_size = 64;
	
	/*************** Package 69 **********/
	// Initalize the size for this package
	package[69].sort_size = 2048;
	package[69].crc_size = 64;
	package[69].vectoradd_size = 1024;
	package[69].vectorsub_size = 1024;
	package[69].vectormul_size = 1024;
	
	/*************** Package 70 **********/
	// Initalize the size for this package
	package[70].sort_size = 64;
	package[70].crc_size = 4095;
	package[70].vectoradd_size = 2048;
	package[70].vectorsub_size = 2048;
	package[70].vectormul_size = 2048;
	
	/*************** Package 71 **********/
	// Initalize the size for this package
	package[71].sort_size = 1024;
	package[71].crc_size = 4095;
	package[71].vectoradd_size = 3500;
	package[71].vectorsub_size = 3500;
	package[71].vectormul_size = 3500;
	
	/*************** Package 72 **********/
	// Initalize the size for this package
	package[72].sort_size = 64;
	package[72].crc_size = 4095;
	package[72].vectoradd_size = 4095;
	package[72].vectorsub_size = 4095;
	package[72].vectormul_size = 4095;
	
	/*************** Package 73 **********/
	// Initalize the size for this package
	package[73].sort_size = 512;
	package[73].crc_size = 2048;
	package[73].vectoradd_size = 3500;
	package[73].vectorsub_size = 3500;
	package[73].vectormul_size = 3500;
	
	/*************** Package 74 **********/
	// Initalize the size for this package
	package[74].sort_size = 3500;
	package[74].crc_size = 1024;
	package[74].vectoradd_size = 3500;
	package[74].vectorsub_size = 3500;
	package[74].vectormul_size = 3500;
	
	/*************** Package 75 **********/
	// Initalize the size for this package
	package[75].sort_size = 512;
	package[75].crc_size = 4095;
	package[75].vectoradd_size = 4095;
	package[75].vectorsub_size = 4095;
	package[75].vectormul_size = 4095;
	
	/*************** Package 76 **********/
	// Initalize the size for this package
	package[76].sort_size = 3500;
	package[76].crc_size = 1024;
	package[76].vectoradd_size = 3500;
	package[76].vectorsub_size = 3500;
	package[76].vectormul_size = 3500;
	
	/*************** Package 77 **********/
	// Initalize the size for this package
	package[77].sort_size = 4095;
	package[77].crc_size = 1024;
	package[77].vectoradd_size = 4095;
	package[77].vectorsub_size = 4095;
	package[77].vectormul_size = 4095;
	
	/*************** Package 78 **********/
	// Initalize the size for this package
	package[78].sort_size = 4095;
	package[78].crc_size = 1024;
	package[78].vectoradd_size = 3500;
	package[78].vectorsub_size = 3500;
	package[78].vectormul_size = 3500;
	
	/*************** Package 79 **********/
	// Initalize the size for this package
	package[79].sort_size = 1024;
	package[79].crc_size = 64;
	package[79].vectoradd_size = 64;
	package[79].vectorsub_size = 64;
	package[79].vectormul_size = 64;
	
	/*************** Package 80 **********/
	// Initalize the size for this package
	package[80].sort_size = 64;
	package[80].crc_size = 2048;
	package[80].vectoradd_size = 4095;
	package[80].vectorsub_size = 4095;
	package[80].vectormul_size = 4095;
	
	/*************** Package 81 **********/
	// Initalize the size for this package
	package[81].sort_size = 3500;
	package[81].crc_size = 1024;
	package[81].vectoradd_size = 4095;
	package[81].vectorsub_size = 4095;
	package[81].vectormul_size = 4095;
	
	/*************** Package 82 **********/
	// Initalize the size for this package
	package[82].sort_size = 1024;
	package[82].crc_size = 512;
	package[82].vectoradd_size = 4095;
	package[82].vectorsub_size = 4095;
	package[82].vectormul_size = 4095;
	
	/*************** Package 83 **********/
	// Initalize the size for this package
	package[83].sort_size = 4095;
	package[83].crc_size = 512;
	package[83].vectoradd_size = 2048;
	package[83].vectorsub_size = 2048;
	package[83].vectormul_size = 2048;
	
	/*************** Package 84 **********/
	// Initalize the size for this package
	package[84].sort_size = 4095;
	package[84].crc_size = 3500;
	package[84].vectoradd_size = 2048;
	package[84].vectorsub_size = 2048;
	package[84].vectormul_size = 2048;
	
	/*************** Package 85 **********/
	// Initalize the size for this package
	package[85].sort_size = 512;
	package[85].crc_size = 3500;
	package[85].vectoradd_size = 64;
	package[85].vectorsub_size = 64;
	package[85].vectormul_size = 64;
	
	/*************** Package 86 **********/
	// Initalize the size for this package
	package[86].sort_size = 3500;
	package[86].crc_size = 1024;
	package[86].vectoradd_size = 3500;
	package[86].vectorsub_size = 3500;
	package[86].vectormul_size = 3500;
	
	/*************** Package 87 **********/
	// Initalize the size for this package
	package[87].sort_size = 4095;
	package[87].crc_size = 64;
	package[87].vectoradd_size = 64;
	package[87].vectorsub_size = 64;
	package[87].vectormul_size = 64;
	
	/*************** Package 88 **********/
	// Initalize the size for this package
	package[88].sort_size = 4095;
	package[88].crc_size = 4095;
	package[88].vectoradd_size = 1024;
	package[88].vectorsub_size = 1024;
	package[88].vectormul_size = 1024;
	
	/*************** Package 89 **********/
	// Initalize the size for this package
	package[89].sort_size = 2048;
	package[89].crc_size = 4095;
	package[89].vectoradd_size = 64;
	package[89].vectorsub_size = 64;
	package[89].vectormul_size = 64;
	
	/*************** Package 90 **********/
	// Initalize the size for this package
	package[90].sort_size = 1024;
	package[90].crc_size = 2048;
	package[90].vectoradd_size = 4095;
	package[90].vectorsub_size = 4095;
	package[90].vectormul_size = 4095;
	
	/*************** Package 91 **********/
	// Initalize the size for this package
	package[91].sort_size = 2048;
	package[91].crc_size = 512;
	package[91].vectoradd_size = 3500;
	package[91].vectorsub_size = 3500;
	package[91].vectormul_size = 3500;
	
	/*************** Package 92 **********/
	// Initalize the size for this package
	package[92].sort_size = 512;
	package[92].crc_size = 64;
	package[92].vectoradd_size = 64;
	package[92].vectorsub_size = 64;
	package[92].vectormul_size = 64;
	
	/*************** Package 93 **********/
	// Initalize the size for this package
	package[93].sort_size = 3500;
	package[93].crc_size = 2048;
	package[93].vectoradd_size = 2048;
	package[93].vectorsub_size = 2048;
	package[93].vectormul_size = 2048;
	
	/*************** Package 94 **********/
	// Initalize the size for this package
	package[94].sort_size = 3500;
	package[94].crc_size = 2048;
	package[94].vectoradd_size = 512;
	package[94].vectorsub_size = 512;
	package[94].vectormul_size = 512;
	
	/*************** Package 95 **********/
	// Initalize the size for this package
	package[95].sort_size = 2048;
	package[95].crc_size = 2048;
	package[95].vectoradd_size = 64;
	package[95].vectorsub_size = 64;
	package[95].vectormul_size = 64;
	
	/*************** Package 96 **********/
	// Initalize the size for this package
	package[96].sort_size = 3500;
	package[96].crc_size = 64;
	package[96].vectoradd_size = 512;
	package[96].vectorsub_size = 512;
	package[96].vectormul_size = 512;
	
	/*************** Package 97 **********/
	// Initalize the size for this package
	package[97].sort_size = 2048;
	package[97].crc_size = 3500;
	package[97].vectoradd_size = 3500;
	package[97].vectorsub_size = 3500;
	package[97].vectormul_size = 3500;
	
	/*************** Package 98 **********/
	// Initalize the size for this package
	package[98].sort_size = 1024;
	package[98].crc_size = 512;
	package[98].vectoradd_size = 4095;
	package[98].vectorsub_size = 4095;
	package[98].vectormul_size = 4095;
	
	/*************** Package 99 **********/
	// Initalize the size for this package
	package[99].sort_size = 2048;
	package[99].crc_size = 4095;
	package[99].vectoradd_size = 3500;
	package[99].vectorsub_size = 3500;
	package[99].vectormul_size = 3500;
	
	/*************** Package 100 **********/
	// Initalize the size for this package
	package[100].sort_size = 3500;
	package[100].crc_size = 4095;
	package[100].vectoradd_size = 3500;
	package[100].vectorsub_size = 3500;
	package[100].vectormul_size = 3500;
	
	/*************** Package 101 **********/
	// Initalize the size for this package
	package[101].sort_size = 2048;
	package[101].crc_size = 1024;
	package[101].vectoradd_size = 1024;
	package[101].vectorsub_size = 1024;
	package[101].vectormul_size = 1024;
	
	/*************** Package 102 **********/
	// Initalize the size for this package
	package[102].sort_size = 1024;
	package[102].crc_size = 64;
	package[102].vectoradd_size = 512;
	package[102].vectorsub_size = 512;
	package[102].vectormul_size = 512;
	
	/*************** Package 103 **********/
	// Initalize the size for this package
	package[103].sort_size = 4095;
	package[103].crc_size = 1024;
	package[103].vectoradd_size = 4095;
	package[103].vectorsub_size = 4095;
	package[103].vectormul_size = 4095;
	
	/*************** Package 104 **********/
	// Initalize the size for this package
	package[104].sort_size = 64;
	package[104].crc_size = 4095;
	package[104].vectoradd_size = 64;
	package[104].vectorsub_size = 64;
	package[104].vectormul_size = 64;
	
	/*************** Package 105 **********/
	// Initalize the size for this package
	package[105].sort_size = 4095;
	package[105].crc_size = 4095;
	package[105].vectoradd_size = 4095;
	package[105].vectorsub_size = 4095;
	package[105].vectormul_size = 4095;
	
	/*************** Package 106 **********/
	// Initalize the size for this package
	package[106].sort_size = 4095;
	package[106].crc_size = 64;
	package[106].vectoradd_size = 1024;
	package[106].vectorsub_size = 1024;
	package[106].vectormul_size = 1024;
	
	/*************** Package 107 **********/
	// Initalize the size for this package
	package[107].sort_size = 64;
	package[107].crc_size = 2048;
	package[107].vectoradd_size = 4095;
	package[107].vectorsub_size = 4095;
	package[107].vectormul_size = 4095;
	
	/*************** Package 108 **********/
	// Initalize the size for this package
	package[108].sort_size = 512;
	package[108].crc_size = 64;
	package[108].vectoradd_size = 2048;
	package[108].vectorsub_size = 2048;
	package[108].vectormul_size = 2048;
	
	/*************** Package 109 **********/
	// Initalize the size for this package
	package[109].sort_size = 4095;
	package[109].crc_size = 64;
	package[109].vectoradd_size = 4095;
	package[109].vectorsub_size = 4095;
	package[109].vectormul_size = 4095;
	
	/*************** Package 110 **********/
	// Initalize the size for this package
	package[110].sort_size = 2048;
	package[110].crc_size = 4095;
	package[110].vectoradd_size = 512;
	package[110].vectorsub_size = 512;
	package[110].vectormul_size = 512;
	
	/*************** Package 111 **********/
	// Initalize the size for this package
	package[111].sort_size = 64;
	package[111].crc_size = 1024;
	package[111].vectoradd_size = 64;
	package[111].vectorsub_size = 64;
	package[111].vectormul_size = 64;
	
	/*************** Package 112 **********/
	// Initalize the size for this package
	package[112].sort_size = 2048;
	package[112].crc_size = 512;
	package[112].vectoradd_size = 4095;
	package[112].vectorsub_size = 4095;
	package[112].vectormul_size = 4095;
	
	/*************** Package 113 **********/
	// Initalize the size for this package
	package[113].sort_size = 1024;
	package[113].crc_size = 1024;
	package[113].vectoradd_size = 2048;
	package[113].vectorsub_size = 2048;
	package[113].vectormul_size = 2048;
	
	/*************** Package 114 **********/
	// Initalize the size for this package
	package[114].sort_size = 1024;
	package[114].crc_size = 512;
	package[114].vectoradd_size = 4095;
	package[114].vectorsub_size = 4095;
	package[114].vectormul_size = 4095;
	
	/*************** Package 115 **********/
	// Initalize the size for this package
	package[115].sort_size = 2048;
	package[115].crc_size = 512;
	package[115].vectoradd_size = 3500;
	package[115].vectorsub_size = 3500;
	package[115].vectormul_size = 3500;
	
	/*************** Package 116 **********/
	// Initalize the size for this package
	package[116].sort_size = 64;
	package[116].crc_size = 2048;
	package[116].vectoradd_size = 4095;
	package[116].vectorsub_size = 4095;
	package[116].vectormul_size = 4095;
	
	/*************** Package 117 **********/
	// Initalize the size for this package
	package[117].sort_size = 2048;
	package[117].crc_size = 2048;
	package[117].vectoradd_size = 512;
	package[117].vectorsub_size = 512;
	package[117].vectormul_size = 512;
	
	/*************** Package 118 **********/
	// Initalize the size for this package
	package[118].sort_size = 3500;
	package[118].crc_size = 4095;
	package[118].vectoradd_size = 3500;
	package[118].vectorsub_size = 3500;
	package[118].vectormul_size = 3500;
	
	/*************** Package 119 **********/
	// Initalize the size for this package
	package[119].sort_size = 64;
	package[119].crc_size = 4095;
	package[119].vectoradd_size = 3500;
	package[119].vectorsub_size = 3500;
	package[119].vectormul_size = 3500;
	
	/*************** Package 120 **********/
	// Initalize the size for this package
	package[120].sort_size = 2048;
	package[120].crc_size = 4095;
	package[120].vectoradd_size = 512;
	package[120].vectorsub_size = 512;
	package[120].vectormul_size = 512;
	
	/*************** Package 121 **********/
	// Initalize the size for this package
	package[121].sort_size = 64;
	package[121].crc_size = 4095;
	package[121].vectoradd_size = 4095;
	package[121].vectorsub_size = 4095;
	package[121].vectormul_size = 4095;
	
	/*************** Package 122 **********/
	// Initalize the size for this package
	package[122].sort_size = 512;
	package[122].crc_size = 2048;
	package[122].vectoradd_size = 4095;
	package[122].vectorsub_size = 4095;
	package[122].vectormul_size = 4095;
	
	/*************** Package 123 **********/
	// Initalize the size for this package
	package[123].sort_size = 2048;
	package[123].crc_size = 512;
	package[123].vectoradd_size = 64;
	package[123].vectorsub_size = 64;
	package[123].vectormul_size = 64;
	
	/*************** Package 124 **********/
	// Initalize the size for this package
	package[124].sort_size = 2048;
	package[124].crc_size = 1024;
	package[124].vectoradd_size = 2048;
	package[124].vectorsub_size = 2048;
	package[124].vectormul_size = 2048;
	
	/*************** Package 125 **********/
	// Initalize the size for this package
	package[125].sort_size = 1024;
	package[125].crc_size = 3500;
	package[125].vectoradd_size = 64;
	package[125].vectorsub_size = 64;
	package[125].vectormul_size = 64;
	
	/*************** Package 126 **********/
	// Initalize the size for this package
	package[126].sort_size = 2048;
	package[126].crc_size = 512;
	package[126].vectoradd_size = 2048;
	package[126].vectorsub_size = 2048;
	package[126].vectormul_size = 2048;
	
	/*************** Package 127 **********/
	// Initalize the size for this package
	package[127].sort_size = 3500;
	package[127].crc_size = 1024;
	package[127].vectoradd_size = 64;
	package[127].vectorsub_size = 64;
	package[127].vectormul_size = 64;
	
	/*************** Package 128 **********/
	// Initalize the size for this package
	package[128].sort_size = 2048;
	package[128].crc_size = 64;
	package[128].vectoradd_size = 2048;
	package[128].vectorsub_size = 2048;
	package[128].vectormul_size = 2048;
	
	/*************** Package 129 **********/
	// Initalize the size for this package
	package[129].sort_size = 2048;
	package[129].crc_size = 2048;
	package[129].vectoradd_size = 3500;
	package[129].vectorsub_size = 3500;
	package[129].vectormul_size = 3500;
	
	/*************** Package 130 **********/
	// Initalize the size for this package
	package[130].sort_size = 1024;
	package[130].crc_size = 3500;
	package[130].vectoradd_size = 3500;
	package[130].vectorsub_size = 3500;
	package[130].vectormul_size = 3500;
	
	/*************** Package 131 **********/
	// Initalize the size for this package
	package[131].sort_size = 3500;
	package[131].crc_size = 4095;
	package[131].vectoradd_size = 3500;
	package[131].vectorsub_size = 3500;
	package[131].vectormul_size = 3500;
	
	/*************** Package 132 **********/
	// Initalize the size for this package
	package[132].sort_size = 64;
	package[132].crc_size = 64;
	package[132].vectoradd_size = 3500;
	package[132].vectorsub_size = 3500;
	package[132].vectormul_size = 3500;
	
	/*************** Package 133 **********/
	// Initalize the size for this package
	package[133].sort_size = 512;
	package[133].crc_size = 64;
	package[133].vectoradd_size = 512;
	package[133].vectorsub_size = 512;
	package[133].vectormul_size = 512;
	
	/*************** Package 134 **********/
	// Initalize the size for this package
	package[134].sort_size = 4095;
	package[134].crc_size = 64;
	package[134].vectoradd_size = 512;
	package[134].vectorsub_size = 512;
	package[134].vectormul_size = 512;
	
	/*************** Package 135 **********/
	// Initalize the size for this package
	package[135].sort_size = 64;
	package[135].crc_size = 512;
	package[135].vectoradd_size = 1024;
	package[135].vectorsub_size = 1024;
	package[135].vectormul_size = 1024;
	
	/*************** Package 136 **********/
	// Initalize the size for this package
	package[136].sort_size = 3500;
	package[136].crc_size = 1024;
	package[136].vectoradd_size = 4095;
	package[136].vectorsub_size = 4095;
	package[136].vectormul_size = 4095;
	
	/*************** Package 137 **********/
	// Initalize the size for this package
	package[137].sort_size = 4095;
	package[137].crc_size = 1024;
	package[137].vectoradd_size = 512;
	package[137].vectorsub_size = 512;
	package[137].vectormul_size = 512;
	
	/*************** Package 138 **********/
	// Initalize the size for this package
	package[138].sort_size = 4095;
	package[138].crc_size = 64;
	package[138].vectoradd_size = 1024;
	package[138].vectorsub_size = 1024;
	package[138].vectormul_size = 1024;
	
	/*************** Package 139 **********/
	// Initalize the size for this package
	package[139].sort_size = 64;
	package[139].crc_size = 4095;
	package[139].vectoradd_size = 1024;
	package[139].vectorsub_size = 1024;
	package[139].vectormul_size = 1024;
	
	/*************** Package 140 **********/
	// Initalize the size for this package
	package[140].sort_size = 2048;
	package[140].crc_size = 64;
	package[140].vectoradd_size = 512;
	package[140].vectorsub_size = 512;
	package[140].vectormul_size = 512;
	
	/*************** Package 141 **********/
	// Initalize the size for this package
	package[141].sort_size = 3500;
	package[141].crc_size = 512;
	package[141].vectoradd_size = 64;
	package[141].vectorsub_size = 64;
	package[141].vectormul_size = 64;
	
	/*************** Package 142 **********/
	// Initalize the size for this package
	package[142].sort_size = 2048;
	package[142].crc_size = 1024;
	package[142].vectoradd_size = 512;
	package[142].vectorsub_size = 512;
	package[142].vectormul_size = 512;
	
	/*************** Package 143 **********/
	// Initalize the size for this package
	package[143].sort_size = 2048;
	package[143].crc_size = 2048;
	package[143].vectoradd_size = 1024;
	package[143].vectorsub_size = 1024;
	package[143].vectormul_size = 1024;
	
	/*************** Package 144 **********/
	// Initalize the size for this package
	package[144].sort_size = 64;
	package[144].crc_size = 512;
	package[144].vectoradd_size = 4095;
	package[144].vectorsub_size = 4095;
	package[144].vectormul_size = 4095;
	
	/*************** Package 145 **********/
	// Initalize the size for this package
	package[145].sort_size = 3500;
	package[145].crc_size = 2048;
	package[145].vectoradd_size = 64;
	package[145].vectorsub_size = 64;
	package[145].vectormul_size = 64;
	
	/*************** Package 146 **********/
	// Initalize the size for this package
	package[146].sort_size = 512;
	package[146].crc_size = 64;
	package[146].vectoradd_size = 1024;
	package[146].vectorsub_size = 1024;
	package[146].vectormul_size = 1024;
	
	/*************** Package 147 **********/
	// Initalize the size for this package
	package[147].sort_size = 2048;
	package[147].crc_size = 3500;
	package[147].vectoradd_size = 3500;
	package[147].vectorsub_size = 3500;
	package[147].vectormul_size = 3500;
	
	/*************** Package 148 **********/
	// Initalize the size for this package
	package[148].sort_size = 3500;
	package[148].crc_size = 1024;
	package[148].vectoradd_size = 512;
	package[148].vectorsub_size = 512;
	package[148].vectormul_size = 512;
	
	/*************** Package 149 **********/
	// Initalize the size for this package
	package[149].sort_size = 1024;
	package[149].crc_size = 1024;
	package[149].vectoradd_size = 2048;
	package[149].vectorsub_size = 2048;
	package[149].vectormul_size = 2048;
	
	/*************** Package 150 **********/
	// Initalize the size for this package
	package[150].sort_size = 4095;
	package[150].crc_size = 1024;
	package[150].vectoradd_size = 2048;
	package[150].vectorsub_size = 2048;
	package[150].vectormul_size = 2048;
	
	/*************** Package 151 **********/
	// Initalize the size for this package
	package[151].sort_size = 64;
	package[151].crc_size = 512;
	package[151].vectoradd_size = 3500;
	package[151].vectorsub_size = 3500;
	package[151].vectormul_size = 3500;
	
	/*************** Package 152 **********/
	// Initalize the size for this package
	package[152].sort_size = 1024;
	package[152].crc_size = 64;
	package[152].vectoradd_size = 3500;
	package[152].vectorsub_size = 3500;
	package[152].vectormul_size = 3500;
	
	/*************** Package 153 **********/
	// Initalize the size for this package
	package[153].sort_size = 2048;
	package[153].crc_size = 4095;
	package[153].vectoradd_size = 64;
	package[153].vectorsub_size = 64;
	package[153].vectormul_size = 64;
	
	/*************** Package 154 **********/
	// Initalize the size for this package
	package[154].sort_size = 2048;
	package[154].crc_size = 512;
	package[154].vectoradd_size = 4095;
	package[154].vectorsub_size = 4095;
	package[154].vectormul_size = 4095;
	
	/*************** Package 155 **********/
	// Initalize the size for this package
	package[155].sort_size = 64;
	package[155].crc_size = 3500;
	package[155].vectoradd_size = 3500;
	package[155].vectorsub_size = 3500;
	package[155].vectormul_size = 3500;
	
	/*************** Package 156 **********/
	// Initalize the size for this package
	package[156].sort_size = 512;
	package[156].crc_size = 2048;
	package[156].vectoradd_size = 512;
	package[156].vectorsub_size = 512;
	package[156].vectormul_size = 512;
	
	/*************** Package 157 **********/
	// Initalize the size for this package
	package[157].sort_size = 1024;
	package[157].crc_size = 3500;
	package[157].vectoradd_size = 512;
	package[157].vectorsub_size = 512;
	package[157].vectormul_size = 512;
	
	/*************** Package 158 **********/
	// Initalize the size for this package
	package[158].sort_size = 3500;
	package[158].crc_size = 64;
	package[158].vectoradd_size = 64;
	package[158].vectorsub_size = 64;
	package[158].vectormul_size = 64;
	
	/*************** Package 159 **********/
	// Initalize the size for this package
	package[159].sort_size = 1024;
	package[159].crc_size = 64;
	package[159].vectoradd_size = 3500;
	package[159].vectorsub_size = 3500;
	package[159].vectormul_size = 3500;
	
	/*************** Package 160 **********/
	// Initalize the size for this package
	package[160].sort_size = 64;
	package[160].crc_size = 2048;
	package[160].vectoradd_size = 512;
	package[160].vectorsub_size = 512;
	package[160].vectormul_size = 512;
	
	/*************** Package 161 **********/
	// Initalize the size for this package
	package[161].sort_size = 512;
	package[161].crc_size = 2048;
	package[161].vectoradd_size = 1024;
	package[161].vectorsub_size = 1024;
	package[161].vectormul_size = 1024;
	
	/*************** Package 162 **********/
	// Initalize the size for this package
	package[162].sort_size = 64;
	package[162].crc_size = 3500;
	package[162].vectoradd_size = 2048;
	package[162].vectorsub_size = 2048;
	package[162].vectormul_size = 2048;
	
	/*************** Package 163 **********/
	// Initalize the size for this package
	package[163].sort_size = 64;
	package[163].crc_size = 4095;
	package[163].vectoradd_size = 512;
	package[163].vectorsub_size = 512;
	package[163].vectormul_size = 512;
	
	/*************** Package 164 **********/
	// Initalize the size for this package
	package[164].sort_size = 4095;
	package[164].crc_size = 4095;
	package[164].vectoradd_size = 512;
	package[164].vectorsub_size = 512;
	package[164].vectormul_size = 512;
	
	/*************** Package 165 **********/
	// Initalize the size for this package
	package[165].sort_size = 64;
	package[165].crc_size = 512;
	package[165].vectoradd_size = 1024;
	package[165].vectorsub_size = 1024;
	package[165].vectormul_size = 1024;
	
	/*************** Package 166 **********/
	// Initalize the size for this package
	package[166].sort_size = 512;
	package[166].crc_size = 2048;
	package[166].vectoradd_size = 3500;
	package[166].vectorsub_size = 3500;
	package[166].vectormul_size = 3500;
	
	/*************** Package 167 **********/
	// Initalize the size for this package
	package[167].sort_size = 2048;
	package[167].crc_size = 1024;
	package[167].vectoradd_size = 64;
	package[167].vectorsub_size = 64;
	package[167].vectormul_size = 64;
	
	/*************** Package 168 **********/
	// Initalize the size for this package
	package[168].sort_size = 1024;
	package[168].crc_size = 1024;
	package[168].vectoradd_size = 2048;
	package[168].vectorsub_size = 2048;
	package[168].vectormul_size = 2048;
	
	/*************** Package 169 **********/
	// Initalize the size for this package
	package[169].sort_size = 2048;
	package[169].crc_size = 4095;
	package[169].vectoradd_size = 4095;
	package[169].vectorsub_size = 4095;
	package[169].vectormul_size = 4095;
	
	/*************** Package 170 **********/
	// Initalize the size for this package
	package[170].sort_size = 1024;
	package[170].crc_size = 512;
	package[170].vectoradd_size = 4095;
	package[170].vectorsub_size = 4095;
	package[170].vectormul_size = 4095;
	
	/*************** Package 171 **********/
	// Initalize the size for this package
	package[171].sort_size = 512;
	package[171].crc_size = 64;
	package[171].vectoradd_size = 4095;
	package[171].vectorsub_size = 4095;
	package[171].vectormul_size = 4095;
	
	/*************** Package 172 **********/
	// Initalize the size for this package
	package[172].sort_size = 4095;
	package[172].crc_size = 4095;
	package[172].vectoradd_size = 2048;
	package[172].vectorsub_size = 2048;
	package[172].vectormul_size = 2048;
	
	/*************** Package 173 **********/
	// Initalize the size for this package
	package[173].sort_size = 3500;
	package[173].crc_size = 1024;
	package[173].vectoradd_size = 4095;
	package[173].vectorsub_size = 4095;
	package[173].vectormul_size = 4095;
	
	/*************** Package 174 **********/
	// Initalize the size for this package
	package[174].sort_size = 64;
	package[174].crc_size = 4095;
	package[174].vectoradd_size = 64;
	package[174].vectorsub_size = 64;
	package[174].vectormul_size = 64;
	
	/*************** Package 175 **********/
	// Initalize the size for this package
	package[175].sort_size = 3500;
	package[175].crc_size = 64;
	package[175].vectoradd_size = 512;
	package[175].vectorsub_size = 512;
	package[175].vectormul_size = 512;
	
	/*************** Package 176 **********/
	// Initalize the size for this package
	package[176].sort_size = 2048;
	package[176].crc_size = 64;
	package[176].vectoradd_size = 512;
	package[176].vectorsub_size = 512;
	package[176].vectormul_size = 512;
	
	/*************** Package 177 **********/
	// Initalize the size for this package
	package[177].sort_size = 512;
	package[177].crc_size = 64;
	package[177].vectoradd_size = 4095;
	package[177].vectorsub_size = 4095;
	package[177].vectormul_size = 4095;
	
	/*************** Package 178 **********/
	// Initalize the size for this package
	package[178].sort_size = 4095;
	package[178].crc_size = 1024;
	package[178].vectoradd_size = 2048;
	package[178].vectorsub_size = 2048;
	package[178].vectormul_size = 2048;
	
	/*************** Package 179 **********/
	// Initalize the size for this package
	package[179].sort_size = 4095;
	package[179].crc_size = 64;
	package[179].vectoradd_size = 1024;
	package[179].vectorsub_size = 1024;
	package[179].vectormul_size = 1024;
	
	/*************** Package 180 **********/
	// Initalize the size for this package
	package[180].sort_size = 3500;
	package[180].crc_size = 512;
	package[180].vectoradd_size = 3500;
	package[180].vectorsub_size = 3500;
	package[180].vectormul_size = 3500;
	
	/*************** Package 181 **********/
	// Initalize the size for this package
	package[181].sort_size = 4095;
	package[181].crc_size = 64;
	package[181].vectoradd_size = 512;
	package[181].vectorsub_size = 512;
	package[181].vectormul_size = 512;
	
	/*************** Package 182 **********/
	// Initalize the size for this package
	package[182].sort_size = 3500;
	package[182].crc_size = 512;
	package[182].vectoradd_size = 512;
	package[182].vectorsub_size = 512;
	package[182].vectormul_size = 512;
	
	/*************** Package 183 **********/
	// Initalize the size for this package
	package[183].sort_size = 3500;
	package[183].crc_size = 3500;
	package[183].vectoradd_size = 64;
	package[183].vectorsub_size = 64;
	package[183].vectormul_size = 64;
	
	/*************** Package 184 **********/
	// Initalize the size for this package
	package[184].sort_size = 4095;
	package[184].crc_size = 64;
	package[184].vectoradd_size = 512;
	package[184].vectorsub_size = 512;
	package[184].vectormul_size = 512;
	
	/*************** Package 185 **********/
	// Initalize the size for this package
	package[185].sort_size = 1024;
	package[185].crc_size = 64;
	package[185].vectoradd_size = 2048;
	package[185].vectorsub_size = 2048;
	package[185].vectormul_size = 2048;
	
	/*************** Package 186 **********/
	// Initalize the size for this package
	package[186].sort_size = 2048;
	package[186].crc_size = 64;
	package[186].vectoradd_size = 2048;
	package[186].vectorsub_size = 2048;
	package[186].vectormul_size = 2048;
	
	/*************** Package 187 **********/
	// Initalize the size for this package
	package[187].sort_size = 3500;
	package[187].crc_size = 3500;
	package[187].vectoradd_size = 512;
	package[187].vectorsub_size = 512;
	package[187].vectormul_size = 512;
	
	/*************** Package 188 **********/
	// Initalize the size for this package
	package[188].sort_size = 512;
	package[188].crc_size = 512;
	package[188].vectoradd_size = 2048;
	package[188].vectorsub_size = 2048;
	package[188].vectormul_size = 2048;
	
	/*************** Package 189 **********/
	// Initalize the size for this package
	package[189].sort_size = 2048;
	package[189].crc_size = 64;
	package[189].vectoradd_size = 512;
	package[189].vectorsub_size = 512;
	package[189].vectormul_size = 512;
	
	/*************** Package 190 **********/
	// Initalize the size for this package
	package[190].sort_size = 1024;
	package[190].crc_size = 4095;
	package[190].vectoradd_size = 3500;
	package[190].vectorsub_size = 3500;
	package[190].vectormul_size = 3500;
	
	/*************** Package 191 **********/
	// Initalize the size for this package
	package[191].sort_size = 4095;
	package[191].crc_size = 64;
	package[191].vectoradd_size = 64;
	package[191].vectorsub_size = 64;
	package[191].vectormul_size = 64;
	
	/*************** Package 192 **********/
	// Initalize the size for this package
	package[192].sort_size = 64;
	package[192].crc_size = 64;
	package[192].vectoradd_size = 64;
	package[192].vectorsub_size = 64;
	package[192].vectormul_size = 64;
	
	/*************** Package 193 **********/
	// Initalize the size for this package
	package[193].sort_size = 3500;
	package[193].crc_size = 1024;
	package[193].vectoradd_size = 512;
	package[193].vectorsub_size = 512;
	package[193].vectormul_size = 512;
	
	/*************** Package 194 **********/
	// Initalize the size for this package
	package[194].sort_size = 1024;
	package[194].crc_size = 1024;
	package[194].vectoradd_size = 3500;
	package[194].vectorsub_size = 3500;
	package[194].vectormul_size = 3500;
	
	/*************** Package 195 **********/
	// Initalize the size for this package
	package[195].sort_size = 64;
	package[195].crc_size = 1024;
	package[195].vectoradd_size = 2048;
	package[195].vectorsub_size = 2048;
	package[195].vectormul_size = 2048;
	
	/*************** Package 196 **********/
	// Initalize the size for this package
	package[196].sort_size = 2048;
	package[196].crc_size = 1024;
	package[196].vectoradd_size = 2048;
	package[196].vectorsub_size = 2048;
	package[196].vectormul_size = 2048;
	
	// Allocate memory
	unsigned int e = 0, k = 0;
	for ( k = 0; k < 197; k++) {
	    package[k].sort_data = (void *) malloc(sizeof(int) * package[k].sort_size);
	    package[k].crc_data = (void *) malloc(sizeof(int) * package[k].crc_size);
	    package[k].crc_data_check = (void *) malloc(sizeof(int) * package[k].crc_size);
	    package[k].dataA = (void *) malloc(sizeof(int) * package[k].vectoradd_size);
	    package[k].dataB = (void *) malloc(sizeof(int) * package[k].vectoradd_size);
	    package[k].dataC = (void *) malloc(sizeof(int) * package[k].vectoradd_size);
	    package[k].sort_valid = (Huint *) malloc(sizeof(Huint));
	    package[k].crc_valid = (Huint *) malloc(sizeof(Huint));
	    package[k].vectoradd_valid = (Huint *) malloc(sizeof(Huint));
	    package[k].vectorsub_valid = (Huint *) malloc(sizeof(Huint));
	    package[k].vectormul_valid = (Huint *) malloc(sizeof(Huint));
	
	    // Check to see if we were able to allocate said memory
	    assert(package[k].sort_valid != NULL);
	    assert(package[k].crc_valid != NULL);
	    assert(package[k].vectoradd_valid != NULL);
	    assert(package[k].vectorsub_valid != NULL);
	    assert(package[k].vectormul_valid != NULL);
	
	    assert(package[k].sort_data != NULL);
	    assert(package[k].crc_data != NULL);
	    assert(package[k].dataA != NULL);
	    assert(package[k].dataB != NULL);
	    assert(package[k].dataC != NULL);
	
	    // Initialize all the valid signals to zero
	    *(package[k].sort_valid) = 0;
	    *(package[k].crc_valid) = 0;
	    *(package[k].vectoradd_valid) = 0;
	    *(package[k].vectorsub_valid) = 0;
	    *(package[k].vectormul_valid) = 0;
	
	    // Initialize the CRC data here
	    for (e = 0; e < package[k].crc_size; e++) { 
	        Hint * data = (Hint *) package[k].crc_data;
	        Hint * data_check = (Hint *) package[k].crc_data_check;
	        data[e] = data_check[e] = (rand() % 1000) * 8;
	    }
	    
	    // Initialize Vector Data 
	    for (e = 0; e < package[k].vectoradd_size; e++) {
	        Hint * dataA = package[k].dataA;
	        Hint * dataB = package[k].dataB;
	        Hint * dataC = package[k].dataC;
	        dataA[e] = rand() % 1000;
	        dataB[e] = rand() % 1000;
	        dataC[e] = 0;
	    }
	
	    // Initialize Sort Data 
	    for (e = 0; e < package[k].sort_size; e++) {
	        Hint * sort_data = (Hint *) package[k].sort_data;
	        sort_data[e] = package[k].sort_size - e;
	    }
	}
	

	start = hthread_time_get();

	thread_create(&threads[0], &attr[0], worker_sort_thread_FUNC_ID, (void *) &package[0], DYNAMIC_HW, 0);
	thread_create(&threads[1], &attr[1], worker_crc_vectormul_sort_thread_FUNC_ID, (void *) &package[1], DYNAMIC_HW, 0);
	thread_create(&threads[2], &attr[2], worker_sort_thread_FUNC_ID, (void *) &package[2], DYNAMIC_HW, 0);
	thread_create(&threads[3], &attr[3], worker_crc_thread_FUNC_ID, (void *) &package[3], DYNAMIC_HW, 0);
	thread_create(&threads[4], &attr[4], worker_sort_thread_FUNC_ID, (void *) &package[4], DYNAMIC_HW, 0);
	thread_create(&threads[5], &attr[5], worker_crc_thread_FUNC_ID, (void *) &package[5], DYNAMIC_HW, 0);
	thread_create(&threads[6], &attr[6], worker_crc_thread_FUNC_ID, (void *) &package[6], DYNAMIC_HW, 0);
	thread_create(&threads[7], &attr[7], worker_sort_vectorsub_crc_thread_FUNC_ID, (void *) &package[7], DYNAMIC_HW, 0);
	thread_create(&threads[8], &attr[8], worker_vectormul_thread_FUNC_ID, (void *) &package[8], DYNAMIC_HW, 0);
	thread_create(&threads[9], &attr[9], worker_vectorsub_thread_FUNC_ID, (void *) &package[9], DYNAMIC_HW, 0);
	thread_create(&threads[10], &attr[10], worker_crc_thread_FUNC_ID, (void *) &package[10], DYNAMIC_HW, 0);
	thread_create(&threads[11], &attr[11], worker_sort_thread_FUNC_ID, (void *) &package[11], DYNAMIC_HW, 0);
	thread_create(&threads[12], &attr[12], worker_sort_thread_FUNC_ID, (void *) &package[12], DYNAMIC_HW, 0);
	thread_create(&threads[13], &attr[13], worker_crc_vectormul_sort_thread_FUNC_ID, (void *) &package[13], DYNAMIC_HW, 0);
	thread_create(&threads[14], &attr[14], worker_sort_thread_FUNC_ID, (void *) &package[14], DYNAMIC_HW, 0);
	thread_create(&threads[15], &attr[15], worker_sort_thread_FUNC_ID, (void *) &package[15], DYNAMIC_HW, 0);
	thread_create(&threads[16], &attr[16], worker_crc_vectormul_sort_thread_FUNC_ID, (void *) &package[16], DYNAMIC_HW, 0);
	thread_create(&threads[17], &attr[17], worker_crc_thread_FUNC_ID, (void *) &package[17], DYNAMIC_HW, 0);
	thread_create(&threads[18], &attr[18], worker_sort_thread_FUNC_ID, (void *) &package[18], DYNAMIC_HW, 0);
	thread_create(&threads[19], &attr[19], worker_vectorsub_thread_FUNC_ID, (void *) &package[19], DYNAMIC_HW, 0);
	thread_create(&threads[20], &attr[20], worker_crc_vectorsub_sort_thread_FUNC_ID, (void *) &package[20], DYNAMIC_HW, 0);
	thread_create(&threads[21], &attr[21], worker_sort_thread_FUNC_ID, (void *) &package[21], DYNAMIC_HW, 0);
	thread_create(&threads[22], &attr[22], worker_crc_thread_FUNC_ID, (void *) &package[22], DYNAMIC_HW, 0);
	thread_create(&threads[23], &attr[23], worker_vectorsub_sort_thread_FUNC_ID, (void *) &package[23], DYNAMIC_HW, 0);
	thread_create(&threads[24], &attr[24], worker_crc_thread_FUNC_ID, (void *) &package[24], DYNAMIC_HW, 0);
	thread_create(&threads[25], &attr[25], worker_crc_vectoradd_thread_FUNC_ID, (void *) &package[25], DYNAMIC_HW, 0);
	thread_create(&threads[26], &attr[26], worker_sort_thread_FUNC_ID, (void *) &package[26], DYNAMIC_HW, 0);
	thread_create(&threads[27], &attr[27], worker_sort_thread_FUNC_ID, (void *) &package[27], DYNAMIC_HW, 0);
	thread_create(&threads[28], &attr[28], worker_vectorsub_thread_FUNC_ID, (void *) &package[28], DYNAMIC_HW, 0);
	thread_create(&threads[29], &attr[29], worker_sort_vectorsub_thread_FUNC_ID, (void *) &package[29], DYNAMIC_HW, 0);
	thread_create(&threads[30], &attr[30], worker_vectormul_thread_FUNC_ID, (void *) &package[30], DYNAMIC_HW, 0);
	thread_create(&threads[31], &attr[31], worker_sort_thread_FUNC_ID, (void *) &package[31], DYNAMIC_HW, 0);
	thread_create(&threads[32], &attr[32], worker_vectormul_thread_FUNC_ID, (void *) &package[32], DYNAMIC_HW, 0);
	thread_create(&threads[33], &attr[33], worker_sort_thread_FUNC_ID, (void *) &package[33], DYNAMIC_HW, 0);
	thread_create(&threads[34], &attr[34], worker_vectormul_thread_FUNC_ID, (void *) &package[34], DYNAMIC_HW, 0);
	thread_create(&threads[35], &attr[35], worker_vectorsub_thread_FUNC_ID, (void *) &package[35], DYNAMIC_HW, 0);
	thread_create(&threads[36], &attr[36], worker_sort_thread_FUNC_ID, (void *) &package[36], DYNAMIC_HW, 0);
	thread_create(&threads[37], &attr[37], worker_sort_crc_vectorsub_thread_FUNC_ID, (void *) &package[37], DYNAMIC_HW, 0);
	thread_create(&threads[38], &attr[38], worker_sort_thread_FUNC_ID, (void *) &package[38], DYNAMIC_HW, 0);
	thread_create(&threads[39], &attr[39], worker_sort_thread_FUNC_ID, (void *) &package[39], DYNAMIC_HW, 0);
	thread_create(&threads[40], &attr[40], worker_crc_thread_FUNC_ID, (void *) &package[40], DYNAMIC_HW, 0);
	thread_create(&threads[41], &attr[41], worker_sort_vectormul_thread_FUNC_ID, (void *) &package[41], DYNAMIC_HW, 0);
	thread_create(&threads[42], &attr[42], worker_sort_thread_FUNC_ID, (void *) &package[42], DYNAMIC_HW, 0);
	thread_create(&threads[43], &attr[43], worker_vectorsub_crc_thread_FUNC_ID, (void *) &package[43], DYNAMIC_HW, 0);
	thread_create(&threads[44], &attr[44], worker_crc_vectormul_thread_FUNC_ID, (void *) &package[44], DYNAMIC_HW, 0);
	thread_create(&threads[45], &attr[45], worker_sort_vectorsub_crc_thread_FUNC_ID, (void *) &package[45], DYNAMIC_HW, 0);
	thread_create(&threads[46], &attr[46], worker_sort_thread_FUNC_ID, (void *) &package[46], DYNAMIC_HW, 0);
	thread_create(&threads[47], &attr[47], worker_crc_thread_FUNC_ID, (void *) &package[47], DYNAMIC_HW, 0);
	thread_create(&threads[48], &attr[48], worker_sort_thread_FUNC_ID, (void *) &package[48], DYNAMIC_HW, 0);
	thread_create(&threads[49], &attr[49], worker_vectorsub_thread_FUNC_ID, (void *) &package[49], DYNAMIC_HW, 0);
	thread_create(&threads[50], &attr[50], worker_vectormul_thread_FUNC_ID, (void *) &package[50], DYNAMIC_HW, 0);
	thread_create(&threads[51], &attr[51], worker_vectormul_thread_FUNC_ID, (void *) &package[51], DYNAMIC_HW, 0);
	thread_create(&threads[52], &attr[52], worker_vectormul_thread_FUNC_ID, (void *) &package[52], DYNAMIC_HW, 0);
	thread_create(&threads[53], &attr[53], worker_vectormul_thread_FUNC_ID, (void *) &package[53], DYNAMIC_HW, 0);
	thread_create(&threads[54], &attr[54], worker_crc_vectoradd_sort_thread_FUNC_ID, (void *) &package[54], DYNAMIC_HW, 0);
	thread_create(&threads[55], &attr[55], worker_sort_vectoradd_thread_FUNC_ID, (void *) &package[55], DYNAMIC_HW, 0);
	thread_create(&threads[56], &attr[56], worker_sort_thread_FUNC_ID, (void *) &package[56], DYNAMIC_HW, 0);
	thread_create(&threads[57], &attr[57], worker_crc_vectormul_sort_thread_FUNC_ID, (void *) &package[57], DYNAMIC_HW, 0);
	thread_create(&threads[58], &attr[58], worker_sort_thread_FUNC_ID, (void *) &package[58], DYNAMIC_HW, 0);
	thread_create(&threads[59], &attr[59], worker_sort_crc_vectorsub_thread_FUNC_ID, (void *) &package[59], DYNAMIC_HW, 0);
	thread_create(&threads[60], &attr[60], worker_sort_thread_FUNC_ID, (void *) &package[60], DYNAMIC_HW, 0);
	thread_create(&threads[61], &attr[61], worker_vectorsub_thread_FUNC_ID, (void *) &package[61], DYNAMIC_HW, 0);
	thread_create(&threads[62], &attr[62], worker_crc_thread_FUNC_ID, (void *) &package[62], DYNAMIC_HW, 0);
	thread_create(&threads[63], &attr[63], worker_vectoradd_crc_sort_thread_FUNC_ID, (void *) &package[63], DYNAMIC_HW, 0);
	thread_create(&threads[64], &attr[64], worker_sort_thread_FUNC_ID, (void *) &package[64], DYNAMIC_HW, 0);
	thread_create(&threads[65], &attr[65], worker_sort_thread_FUNC_ID, (void *) &package[65], DYNAMIC_HW, 0);
	thread_create(&threads[66], &attr[66], worker_sort_vectorsub_crc_thread_FUNC_ID, (void *) &package[66], DYNAMIC_HW, 0);
	thread_create(&threads[67], &attr[67], worker_crc_sort_thread_FUNC_ID, (void *) &package[67], DYNAMIC_HW, 0);
	thread_create(&threads[68], &attr[68], worker_vectoradd_thread_FUNC_ID, (void *) &package[68], DYNAMIC_HW, 0);
	thread_create(&threads[69], &attr[69], worker_sort_crc_vectoradd_thread_FUNC_ID, (void *) &package[69], DYNAMIC_HW, 0);
	thread_create(&threads[70], &attr[70], worker_vectoradd_sort_crc_thread_FUNC_ID, (void *) &package[70], DYNAMIC_HW, 0);
	thread_create(&threads[71], &attr[71], worker_vectormul_thread_FUNC_ID, (void *) &package[71], DYNAMIC_HW, 0);
	thread_create(&threads[72], &attr[72], worker_vectormul_thread_FUNC_ID, (void *) &package[72], DYNAMIC_HW, 0);
	thread_create(&threads[73], &attr[73], worker_vectorsub_sort_thread_FUNC_ID, (void *) &package[73], DYNAMIC_HW, 0);
	thread_create(&threads[74], &attr[74], worker_crc_sort_vectorsub_thread_FUNC_ID, (void *) &package[74], DYNAMIC_HW, 0);
	thread_create(&threads[75], &attr[75], worker_vectoradd_thread_FUNC_ID, (void *) &package[75], DYNAMIC_HW, 0);
	thread_create(&threads[76], &attr[76], worker_vectorsub_thread_FUNC_ID, (void *) &package[76], DYNAMIC_HW, 0);
	thread_create(&threads[77], &attr[77], worker_sort_crc_vectormul_thread_FUNC_ID, (void *) &package[77], DYNAMIC_HW, 0);
	thread_create(&threads[78], &attr[78], worker_crc_vectormul_sort_thread_FUNC_ID, (void *) &package[78], DYNAMIC_HW, 0);
	thread_create(&threads[79], &attr[79], worker_crc_vectorsub_sort_thread_FUNC_ID, (void *) &package[79], DYNAMIC_HW, 0);
	thread_create(&threads[80], &attr[80], worker_sort_vectorsub_thread_FUNC_ID, (void *) &package[80], DYNAMIC_HW, 0);
	thread_create(&threads[81], &attr[81], worker_crc_thread_FUNC_ID, (void *) &package[81], DYNAMIC_HW, 0);
	thread_create(&threads[82], &attr[82], worker_vectoradd_thread_FUNC_ID, (void *) &package[82], DYNAMIC_HW, 0);
	thread_create(&threads[83], &attr[83], worker_crc_thread_FUNC_ID, (void *) &package[83], DYNAMIC_HW, 0);
	thread_create(&threads[84], &attr[84], worker_vectormul_thread_FUNC_ID, (void *) &package[84], DYNAMIC_HW, 0);
	thread_create(&threads[85], &attr[85], worker_sort_crc_vectoradd_thread_FUNC_ID, (void *) &package[85], DYNAMIC_HW, 0);
	thread_create(&threads[86], &attr[86], worker_sort_thread_FUNC_ID, (void *) &package[86], DYNAMIC_HW, 0);
	thread_create(&threads[87], &attr[87], worker_sort_vectorsub_thread_FUNC_ID, (void *) &package[87], DYNAMIC_HW, 0);
	thread_create(&threads[88], &attr[88], worker_sort_thread_FUNC_ID, (void *) &package[88], DYNAMIC_HW, 0);
	thread_create(&threads[89], &attr[89], worker_vectoradd_sort_crc_thread_FUNC_ID, (void *) &package[89], DYNAMIC_HW, 0);
	thread_create(&threads[90], &attr[90], worker_crc_vectoradd_sort_thread_FUNC_ID, (void *) &package[90], DYNAMIC_HW, 0);
	thread_create(&threads[91], &attr[91], worker_sort_vectoradd_thread_FUNC_ID, (void *) &package[91], DYNAMIC_HW, 0);
	thread_create(&threads[92], &attr[92], worker_vectormul_thread_FUNC_ID, (void *) &package[92], DYNAMIC_HW, 0);
	thread_create(&threads[93], &attr[93], worker_sort_crc_vectormul_thread_FUNC_ID, (void *) &package[93], DYNAMIC_HW, 0);
	thread_create(&threads[94], &attr[94], worker_vectoradd_thread_FUNC_ID, (void *) &package[94], DYNAMIC_HW, 0);
	thread_create(&threads[95], &attr[95], worker_vectoradd_sort_crc_thread_FUNC_ID, (void *) &package[95], DYNAMIC_HW, 0);
	thread_create(&threads[96], &attr[96], worker_crc_thread_FUNC_ID, (void *) &package[96], DYNAMIC_HW, 0);
	thread_create(&threads[97], &attr[97], worker_crc_vectorsub_thread_FUNC_ID, (void *) &package[97], DYNAMIC_HW, 0);
	thread_create(&threads[98], &attr[98], worker_sort_thread_FUNC_ID, (void *) &package[98], DYNAMIC_HW, 0);
	thread_create(&threads[99], &attr[99], worker_crc_thread_FUNC_ID, (void *) &package[99], DYNAMIC_HW, 0);
	thread_create(&threads[100], &attr[100], worker_crc_vectorsub_sort_thread_FUNC_ID, (void *) &package[100], DYNAMIC_HW, 0);
	thread_create(&threads[101], &attr[101], worker_crc_vectoradd_sort_thread_FUNC_ID, (void *) &package[101], DYNAMIC_HW, 0);
	thread_create(&threads[102], &attr[102], worker_crc_thread_FUNC_ID, (void *) &package[102], DYNAMIC_HW, 0);
	thread_create(&threads[103], &attr[103], worker_vectorsub_thread_FUNC_ID, (void *) &package[103], DYNAMIC_HW, 0);
	thread_create(&threads[104], &attr[104], worker_crc_thread_FUNC_ID, (void *) &package[104], DYNAMIC_HW, 0);
	thread_create(&threads[105], &attr[105], worker_vectoradd_thread_FUNC_ID, (void *) &package[105], DYNAMIC_HW, 0);
	thread_create(&threads[106], &attr[106], worker_crc_thread_FUNC_ID, (void *) &package[106], DYNAMIC_HW, 0);
	thread_create(&threads[107], &attr[107], worker_vectoradd_crc_sort_thread_FUNC_ID, (void *) &package[107], DYNAMIC_HW, 0);
	thread_create(&threads[108], &attr[108], worker_crc_thread_FUNC_ID, (void *) &package[108], DYNAMIC_HW, 0);
	thread_create(&threads[109], &attr[109], worker_crc_thread_FUNC_ID, (void *) &package[109], DYNAMIC_HW, 0);
	thread_create(&threads[110], &attr[110], worker_sort_vectormul_thread_FUNC_ID, (void *) &package[110], DYNAMIC_HW, 0);
	thread_create(&threads[111], &attr[111], worker_vectormul_thread_FUNC_ID, (void *) &package[111], DYNAMIC_HW, 0);
	thread_create(&threads[112], &attr[112], worker_vectormul_thread_FUNC_ID, (void *) &package[112], DYNAMIC_HW, 0);
	thread_create(&threads[113], &attr[113], worker_sort_crc_vectoradd_thread_FUNC_ID, (void *) &package[113], DYNAMIC_HW, 0);
	thread_create(&threads[114], &attr[114], worker_vectormul_thread_FUNC_ID, (void *) &package[114], DYNAMIC_HW, 0);
	thread_create(&threads[115], &attr[115], worker_crc_vectoradd_sort_thread_FUNC_ID, (void *) &package[115], DYNAMIC_HW, 0);
	thread_create(&threads[116], &attr[116], worker_vectorsub_thread_FUNC_ID, (void *) &package[116], DYNAMIC_HW, 0);
	thread_create(&threads[117], &attr[117], worker_crc_thread_FUNC_ID, (void *) &package[117], DYNAMIC_HW, 0);
	thread_create(&threads[118], &attr[118], worker_sort_thread_FUNC_ID, (void *) &package[118], DYNAMIC_HW, 0);
	thread_create(&threads[119], &attr[119], worker_sort_vectorsub_crc_thread_FUNC_ID, (void *) &package[119], DYNAMIC_HW, 0);
	thread_create(&threads[120], &attr[120], worker_crc_thread_FUNC_ID, (void *) &package[120], DYNAMIC_HW, 0);
	thread_create(&threads[121], &attr[121], worker_vectoradd_thread_FUNC_ID, (void *) &package[121], DYNAMIC_HW, 0);
	thread_create(&threads[122], &attr[122], worker_crc_thread_FUNC_ID, (void *) &package[122], DYNAMIC_HW, 0);
	thread_create(&threads[123], &attr[123], worker_vectormul_thread_FUNC_ID, (void *) &package[123], DYNAMIC_HW, 0);
	thread_create(&threads[124], &attr[124], worker_crc_thread_FUNC_ID, (void *) &package[124], DYNAMIC_HW, 0);
	thread_create(&threads[125], &attr[125], worker_crc_thread_FUNC_ID, (void *) &package[125], DYNAMIC_HW, 0);
	thread_create(&threads[126], &attr[126], worker_sort_crc_vectorsub_thread_FUNC_ID, (void *) &package[126], DYNAMIC_HW, 0);
	thread_create(&threads[127], &attr[127], worker_vectorsub_crc_sort_thread_FUNC_ID, (void *) &package[127], DYNAMIC_HW, 0);
	thread_create(&threads[128], &attr[128], worker_sort_thread_FUNC_ID, (void *) &package[128], DYNAMIC_HW, 0);
	thread_create(&threads[129], &attr[129], worker_sort_thread_FUNC_ID, (void *) &package[129], DYNAMIC_HW, 0);
	thread_create(&threads[130], &attr[130], worker_vectoradd_thread_FUNC_ID, (void *) &package[130], DYNAMIC_HW, 0);
	thread_create(&threads[131], &attr[131], worker_crc_thread_FUNC_ID, (void *) &package[131], DYNAMIC_HW, 0);
	thread_create(&threads[132], &attr[132], worker_crc_thread_FUNC_ID, (void *) &package[132], DYNAMIC_HW, 0);
	thread_create(&threads[133], &attr[133], worker_sort_thread_FUNC_ID, (void *) &package[133], DYNAMIC_HW, 0);
	thread_create(&threads[134], &attr[134], worker_vectorsub_sort_thread_FUNC_ID, (void *) &package[134], DYNAMIC_HW, 0);
	thread_create(&threads[135], &attr[135], worker_vectorsub_thread_FUNC_ID, (void *) &package[135], DYNAMIC_HW, 0);
	thread_create(&threads[136], &attr[136], worker_crc_thread_FUNC_ID, (void *) &package[136], DYNAMIC_HW, 0);
	thread_create(&threads[137], &attr[137], worker_sort_crc_vectoradd_thread_FUNC_ID, (void *) &package[137], DYNAMIC_HW, 0);
	thread_create(&threads[138], &attr[138], worker_vectormul_thread_FUNC_ID, (void *) &package[138], DYNAMIC_HW, 0);
	thread_create(&threads[139], &attr[139], worker_vectorsub_thread_FUNC_ID, (void *) &package[139], DYNAMIC_HW, 0);
	thread_create(&threads[140], &attr[140], worker_sort_thread_FUNC_ID, (void *) &package[140], DYNAMIC_HW, 0);
	thread_create(&threads[141], &attr[141], worker_sort_thread_FUNC_ID, (void *) &package[141], DYNAMIC_HW, 0);
	thread_create(&threads[142], &attr[142], worker_vectorsub_thread_FUNC_ID, (void *) &package[142], DYNAMIC_HW, 0);
	thread_create(&threads[143], &attr[143], worker_sort_thread_FUNC_ID, (void *) &package[143], DYNAMIC_HW, 0);
	thread_create(&threads[144], &attr[144], worker_sort_thread_FUNC_ID, (void *) &package[144], DYNAMIC_HW, 0);
	thread_create(&threads[145], &attr[145], worker_crc_vectormul_thread_FUNC_ID, (void *) &package[145], DYNAMIC_HW, 0);
	thread_create(&threads[146], &attr[146], worker_crc_vectorsub_thread_FUNC_ID, (void *) &package[146], DYNAMIC_HW, 0);
	thread_create(&threads[147], &attr[147], worker_vectoradd_thread_FUNC_ID, (void *) &package[147], DYNAMIC_HW, 0);
	thread_create(&threads[148], &attr[148], worker_crc_vectoradd_thread_FUNC_ID, (void *) &package[148], DYNAMIC_HW, 0);
	thread_create(&threads[149], &attr[149], worker_crc_thread_FUNC_ID, (void *) &package[149], DYNAMIC_HW, 0);
	thread_create(&threads[150], &attr[150], worker_vectoradd_thread_FUNC_ID, (void *) &package[150], DYNAMIC_HW, 0);
	thread_create(&threads[151], &attr[151], worker_vectormul_thread_FUNC_ID, (void *) &package[151], DYNAMIC_HW, 0);
	thread_create(&threads[152], &attr[152], worker_crc_vectorsub_sort_thread_FUNC_ID, (void *) &package[152], DYNAMIC_HW, 0);
	thread_create(&threads[153], &attr[153], worker_crc_thread_FUNC_ID, (void *) &package[153], DYNAMIC_HW, 0);
	thread_create(&threads[154], &attr[154], worker_vectormul_thread_FUNC_ID, (void *) &package[154], DYNAMIC_HW, 0);
	thread_create(&threads[155], &attr[155], worker_vectoradd_thread_FUNC_ID, (void *) &package[155], DYNAMIC_HW, 0);
	thread_create(&threads[156], &attr[156], worker_vectormul_thread_FUNC_ID, (void *) &package[156], DYNAMIC_HW, 0);
	thread_create(&threads[157], &attr[157], worker_sort_thread_FUNC_ID, (void *) &package[157], DYNAMIC_HW, 0);
	thread_create(&threads[158], &attr[158], worker_vectormul_thread_FUNC_ID, (void *) &package[158], DYNAMIC_HW, 0);
	thread_create(&threads[159], &attr[159], worker_crc_thread_FUNC_ID, (void *) &package[159], DYNAMIC_HW, 0);
	thread_create(&threads[160], &attr[160], worker_vectormul_thread_FUNC_ID, (void *) &package[160], DYNAMIC_HW, 0);
	thread_create(&threads[161], &attr[161], worker_crc_thread_FUNC_ID, (void *) &package[161], DYNAMIC_HW, 0);
	thread_create(&threads[162], &attr[162], worker_crc_thread_FUNC_ID, (void *) &package[162], DYNAMIC_HW, 0);
	thread_create(&threads[163], &attr[163], worker_sort_vectorsub_thread_FUNC_ID, (void *) &package[163], DYNAMIC_HW, 0);
	thread_create(&threads[164], &attr[164], worker_vectormul_thread_FUNC_ID, (void *) &package[164], DYNAMIC_HW, 0);
	thread_create(&threads[165], &attr[165], worker_vectorsub_sort_thread_FUNC_ID, (void *) &package[165], DYNAMIC_HW, 0);
	thread_create(&threads[166], &attr[166], worker_crc_sort_thread_FUNC_ID, (void *) &package[166], DYNAMIC_HW, 0);
	thread_create(&threads[167], &attr[167], worker_crc_thread_FUNC_ID, (void *) &package[167], DYNAMIC_HW, 0);
	thread_create(&threads[168], &attr[168], worker_crc_thread_FUNC_ID, (void *) &package[168], DYNAMIC_HW, 0);
	thread_create(&threads[169], &attr[169], worker_sort_thread_FUNC_ID, (void *) &package[169], DYNAMIC_HW, 0);
	thread_create(&threads[170], &attr[170], worker_vectorsub_crc_thread_FUNC_ID, (void *) &package[170], DYNAMIC_HW, 0);
	thread_create(&threads[171], &attr[171], worker_sort_vectoradd_thread_FUNC_ID, (void *) &package[171], DYNAMIC_HW, 0);
	thread_create(&threads[172], &attr[172], worker_sort_thread_FUNC_ID, (void *) &package[172], DYNAMIC_HW, 0);
	thread_create(&threads[173], &attr[173], worker_sort_thread_FUNC_ID, (void *) &package[173], DYNAMIC_HW, 0);
	thread_create(&threads[174], &attr[174], worker_sort_vectoradd_thread_FUNC_ID, (void *) &package[174], DYNAMIC_HW, 0);
	thread_create(&threads[175], &attr[175], worker_sort_thread_FUNC_ID, (void *) &package[175], DYNAMIC_HW, 0);
	thread_create(&threads[176], &attr[176], worker_crc_thread_FUNC_ID, (void *) &package[176], DYNAMIC_HW, 0);
	thread_create(&threads[177], &attr[177], worker_crc_vectorsub_sort_thread_FUNC_ID, (void *) &package[177], DYNAMIC_HW, 0);
	thread_create(&threads[178], &attr[178], worker_crc_thread_FUNC_ID, (void *) &package[178], DYNAMIC_HW, 0);
	thread_create(&threads[179], &attr[179], worker_crc_thread_FUNC_ID, (void *) &package[179], DYNAMIC_HW, 0);
	thread_create(&threads[180], &attr[180], worker_vectorsub_sort_thread_FUNC_ID, (void *) &package[180], DYNAMIC_HW, 0);
	thread_create(&threads[181], &attr[181], worker_vectorsub_thread_FUNC_ID, (void *) &package[181], DYNAMIC_HW, 0);
	thread_create(&threads[182], &attr[182], worker_vectoradd_thread_FUNC_ID, (void *) &package[182], DYNAMIC_HW, 0);
	thread_create(&threads[183], &attr[183], worker_sort_thread_FUNC_ID, (void *) &package[183], DYNAMIC_HW, 0);
	thread_create(&threads[184], &attr[184], worker_vectorsub_crc_thread_FUNC_ID, (void *) &package[184], DYNAMIC_HW, 0);
	thread_create(&threads[185], &attr[185], worker_vectoradd_thread_FUNC_ID, (void *) &package[185], DYNAMIC_HW, 0);
	thread_create(&threads[186], &attr[186], worker_vectorsub_thread_FUNC_ID, (void *) &package[186], DYNAMIC_HW, 0);
	thread_create(&threads[187], &attr[187], worker_sort_vectormul_thread_FUNC_ID, (void *) &package[187], DYNAMIC_HW, 0);
	thread_create(&threads[188], &attr[188], worker_vectoradd_thread_FUNC_ID, (void *) &package[188], DYNAMIC_HW, 0);
	thread_create(&threads[189], &attr[189], worker_sort_crc_vectormul_thread_FUNC_ID, (void *) &package[189], DYNAMIC_HW, 0);
	thread_create(&threads[190], &attr[190], worker_crc_vectoradd_sort_thread_FUNC_ID, (void *) &package[190], DYNAMIC_HW, 0);
	thread_create(&threads[191], &attr[191], worker_sort_vectormul_thread_FUNC_ID, (void *) &package[191], DYNAMIC_HW, 0);
	thread_create(&threads[192], &attr[192], worker_sort_crc_vectormul_thread_FUNC_ID, (void *) &package[192], DYNAMIC_HW, 0);
	thread_create(&threads[193], &attr[193], worker_vectormul_thread_FUNC_ID, (void *) &package[193], DYNAMIC_HW, 0);
	thread_create(&threads[194], &attr[194], worker_sort_crc_vectorsub_thread_FUNC_ID, (void *) &package[194], DYNAMIC_HW, 0);
	thread_create(&threads[195], &attr[195], worker_vectorsub_thread_FUNC_ID, (void *) &package[195], DYNAMIC_HW, 0);
	thread_create(&threads[196], &attr[196], worker_sort_thread_FUNC_ID, (void *) &package[196], DYNAMIC_HW, 0);

	while(get_num_free_slaves() < NUM_AVAILABLE_HETERO_CPUS);

	stop = hthread_time_get();

	#if 0
	   for (e = 0; e < 197; e++) {
	      // Determine which slave ran this thread based on address
	      Huint base = attr[e].hardware_addr - HT_HWTI_COMMAND_OFFSET;
	      Huint slave_num = (base & 0x00FF0000) >> 16;
	      printf("Thread %03d -> Slave : %02d\n", e, slave_num);
	   }
	#endif
	
	int number_of_errors = 0;
	for (e = 0; e < 197; e++) {
	    // Check SORT for this package
	    if (*(package[e].sort_valid)) {
	        unsigned int b = 0;
	        Hint * sorted_list = package[e].sort_data;
	        for (b = 0; b < package[e].sort_size-1; b++) {
	            if (sorted_list[b] > sorted_list[b+1]) {
	                number_of_errors++;
	                printf("\tSORT: Package %u failed\n", e);
	                break;
	            }
	        }
	    }
	    
	    // Check CRC for this package
	    if (*(package[e].crc_valid)) {
	        unsigned int b = 0;
	        Hint * crc = (Hint *) package[e].crc_data;
	        Hint * crc_check = (Hint *) package[e].crc_data_check;
	
	        poly_crc((void *) crc_check, package[e].crc_size);
	
	        for (b = 0; b < package[e].crc_size; b++) {
	            if (crc[b] != crc_check[b]) {
	                printf("\tCRC: Package %u failed\n", e);
	                number_of_errors++;
	                break;
	            }
	        }
	    }
	
	    // Check VectorAdd for this package
	    if (*(package[e].vectoradd_valid)) {
	        unsigned int b = 0;
	        Hint * A = (Hint *) package[e].dataA;
	        Hint * B = (Hint *) package[e].dataB;
	        Hint * C = (Hint *) package[e].dataC;
	        for (b = 0; b < package[e].vectoradd_size; b++) {
	            if (C[b] != A[b] +B[b]) { 
	                printf("\tVectorAdd: Package %u failed\n", e);
	                number_of_errors++;
	                break;
	            }
	        }
	    }
	    
	    // Check VectorSub for this package
	    if (*(package[e].vectorsub_valid)) {
	        unsigned int b = 0;
	        Hint * A = (Hint *) package[e].dataA;
	        Hint * B = (Hint *) package[e].dataB;
	        Hint * C = (Hint *) package[e].dataC;
	        for (b = 0; b < package[e].vectorsub_size; b++) {
	            if (C[b] != A[b] -B[b]) { 
	                printf("\tVectorSub: Package %u failed\n", e);
	                number_of_errors++;
	                break;
	            }
	        }
	    }
	
	    // Check VectorMul for this package
	    if (*(package[e].vectormul_valid)) {
	        unsigned int b = 0;
	        Hint * A = (Hint *) package[e].dataA;
	        Hint * B = (Hint *) package[e].dataB;
	        Hint * C = (Hint *) package[e].dataC;
	        for (b = 0; b < package[e].vectormul_size; b++) {
	            if (C[b] != A[b] *B[b]) { 
	                printf("\tVectorMul: Package %u failed\n", e);
	                number_of_errors++;
	                break;
	            }
	        }
	    }
	}
	
	printf("---------------------------\n");
	printf("\nNumber of Errors = %d\n\n", number_of_errors);
	hthread_time_t diff;
	hthread_time_diff(diff, stop, start);
	printf("Total Execution Time: %.2f ms\n", hthread_time_msec(diff));
	printf("Total Execution Time: %.2f us\n", hthread_time_usec(diff));
    

    // Grab the total number of calls statistic.
    printf("Total number of thread_create (DYNAMIC) calls: %d\n", total_calls);
    printf("---------------------------------------------------\n");
    printf("Perfect Ratio:  %03d / %03d = %0.2f\n", perfect_match_counter, total_calls, perfect_match_counter / (1.0f * total_calls));
    printf("Best Ratio:     %03d / %03d = %0.2f\n", best_match_counter, total_calls, best_match_counter / (1.0f * total_calls));
    printf("Better Ratio:   %03d / %03d = %0.2f\n", better_match_counter, total_calls, better_match_counter / (1.0f * total_calls));
    printf("Possible Ratio: %03d / %03d = %0.2f\n", possible_match_counter, total_calls, possible_match_counter / (1.0f * total_calls));

    perfect_match_counter = 0;
    best_match_counter = 0;
    better_match_counter = 0;
    possible_match_counter = 0;

    Huint hw_counter[NUM_AVAILABLE_HETERO_CPUS];
    Huint sw_counter[NUM_AVAILABLE_HETERO_CPUS];
    Huint pr_counter[NUM_AVAILABLE_HETERO_CPUS];
    Huint total_hw_count = 0;
    Huint total_sw_count = 0;
    Huint total_pr_count = 0;

    for (e = 0; e < NUM_AVAILABLE_HETERO_CPUS; e++) {
        hw_counter[e] = _hwti_get_accelerator_hw_counter(hwti_array[e]);
        sw_counter[e] = _hwti_get_accelerator_sw_counter(hwti_array[e]);
        pr_counter[e] = _hwti_get_accelerator_pr_counter(hwti_array[e]);

        total_hw_count += hw_counter[e];
        total_sw_count += sw_counter[e];
        total_pr_count += pr_counter[e];

        // Manually Reset
        _hwti_set_accelerator_hw_counter(hwti_array[e], 0);
        _hwti_set_accelerator_sw_counter(hwti_array[e], 0);
        _hwti_set_accelerator_pr_counter(hwti_array[e], 0);
    }

    printf("Total HW Counter: %d\n", total_hw_count);
    printf("Total SW Counter: %d\n", total_sw_count);
    printf("Total PR Counter: %d\n", total_pr_count);
    printf("-----------------------\n");
    if (total_hw_count)     // if total_hw_count != 0
        printf("Total PR Counter / HW Counter = %f\n", total_pr_count / (1.0 *total_hw_count));
    printf("Total PR Counter / HW+SW Counter = %f\n", total_pr_count / (1.0 *(total_hw_count+total_sw_count)));

    return 0;
}
#endif

